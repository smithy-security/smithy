# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from smithy.remote_store.findings_service.v1 import (
    findings_service_pb2 as remote__store_dot_findings__service_dot_v1_dot_findings__service__pb2,
)

GRPC_GENERATED_VERSION = "1.73.0"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in remote_store/findings_service/v1/findings_service_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class FindingsServiceStub(object):
    """FindingService is a service that can be implemented to interact with a findings backend."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetFindings = channel.unary_unary(
            "/findings_service.v1.FindingsService/GetFindings",
            request_serializer=remote__store_dot_findings__service_dot_v1_dot_findings__service__pb2.GetFindingsRequest.SerializeToString,
            response_deserializer=remote__store_dot_findings__service_dot_v1_dot_findings__service__pb2.GetFindingsResponse.FromString,
            _registered_method=True,
        )
        self.UpdateFindings = channel.unary_unary(
            "/findings_service.v1.FindingsService/UpdateFindings",
            request_serializer=remote__store_dot_findings__service_dot_v1_dot_findings__service__pb2.UpdateFindingsRequest.SerializeToString,
            response_deserializer=remote__store_dot_findings__service_dot_v1_dot_findings__service__pb2.UpdateFindingsResponse.FromString,
            _registered_method=True,
        )
        self.CreateFindings = channel.unary_unary(
            "/findings_service.v1.FindingsService/CreateFindings",
            request_serializer=remote__store_dot_findings__service_dot_v1_dot_findings__service__pb2.CreateFindingsRequest.SerializeToString,
            response_deserializer=remote__store_dot_findings__service_dot_v1_dot_findings__service__pb2.CreateFindingsResponse.FromString,
            _registered_method=True,
        )


class FindingsServiceServicer(object):
    """FindingService is a service that can be implemented to interact with a findings backend."""

    def GetFindings(self, request, context):
        """GetFindings returns a list of findings associated with the passed id."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def UpdateFindings(self, request, context):
        """UpdateFindings updates the passed findings by id."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CreateFindings(self, request, context):
        """CreateFindings creates the passed findings by id."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_FindingsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetFindings": grpc.unary_unary_rpc_method_handler(
            servicer.GetFindings,
            request_deserializer=remote__store_dot_findings__service_dot_v1_dot_findings__service__pb2.GetFindingsRequest.FromString,
            response_serializer=remote__store_dot_findings__service_dot_v1_dot_findings__service__pb2.GetFindingsResponse.SerializeToString,
        ),
        "UpdateFindings": grpc.unary_unary_rpc_method_handler(
            servicer.UpdateFindings,
            request_deserializer=remote__store_dot_findings__service_dot_v1_dot_findings__service__pb2.UpdateFindingsRequest.FromString,
            response_serializer=remote__store_dot_findings__service_dot_v1_dot_findings__service__pb2.UpdateFindingsResponse.SerializeToString,
        ),
        "CreateFindings": grpc.unary_unary_rpc_method_handler(
            servicer.CreateFindings,
            request_deserializer=remote__store_dot_findings__service_dot_v1_dot_findings__service__pb2.CreateFindingsRequest.FromString,
            response_serializer=remote__store_dot_findings__service_dot_v1_dot_findings__service__pb2.CreateFindingsResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler("findings_service.v1.FindingsService", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("findings_service.v1.FindingsService", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class FindingsService(object):
    """FindingService is a service that can be implemented to interact with a findings backend."""

    @staticmethod
    def GetFindings(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/findings_service.v1.FindingsService/GetFindings",
            remote__store_dot_findings__service_dot_v1_dot_findings__service__pb2.GetFindingsRequest.SerializeToString,
            remote__store_dot_findings__service_dot_v1_dot_findings__service__pb2.GetFindingsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def UpdateFindings(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/findings_service.v1.FindingsService/UpdateFindings",
            remote__store_dot_findings__service_dot_v1_dot_findings__service__pb2.UpdateFindingsRequest.SerializeToString,
            remote__store_dot_findings__service_dot_v1_dot_findings__service__pb2.UpdateFindingsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def CreateFindings(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/findings_service.v1.FindingsService/CreateFindings",
            remote__store_dot_findings__service_dot_v1_dot_findings__service__pb2.CreateFindingsRequest.SerializeToString,
            remote__store_dot_findings__service_dot_v1_dot_findings__service__pb2.CreateFindingsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
