package testing

import (
	"testing"

	ocsf "github.com/smithy-security/smithy/sdk/gen/ocsf_schema/v1"
)

// TestCompareVulnerabilityFindings now sets up data and calls the assertion helper.
func TestCompareVulnerabilityFindings(t *testing.T) {
	//repoDataSource := `{"targetType": 1, "uri": {"path": "file://user.go"}, "fileFindingLocationData": {"startLine": 50, "endLine": 55}, "sourceCodeMetadata": {"repositoryUrl": "https://github.com/my-org/my-repo", "reference": "refs/heads/main"}}`
	containerDataSource := `{"targetType": 2, "uri": {"path": "pkg:docker/my-app@sha256:f1..."}, "fileFindingLocationData": {"startLine": 1, "endLine": 1}, "ociPackageMetadata": {"packageUrl": "my-registry/my-app", "tag": "1.2.3"}}`
	//websiteDataSource := `{"targetType": 3, "uri": {"path": "https://example.com/login"}, "fileFindingLocationData": {"startLine": 25, "endLine": 30}, "websiteMetadata": {"url": "https://example.com/login"}}`

	expectedFindings := []*ocsf.VulnerabilityFinding{
		//{
		//	FindingInfo: &ocsf.FindingInfo{Uid: "G101", Title: "SQL Injection", DataSources: []string{repoDataSource}},
		//	Vulnerabilities: []*ocsf.Vulnerability{{
		//		Cwe:          &ocsf.Cwe{Uid: "89"},
		//		AffectedCode: []*ocsf.AffectedCode{{File: &ocsf.File{Name: "user.go"}, StartLine: int32Ptr(50)}},
		//	}},
		//},
		{
			FindingInfo: &ocsf.FindingInfo{Uid: "G102", Title: "Outdated Container", DataSources: []string{containerDataSource}},
			Vulnerabilities: []*ocsf.Vulnerability{{
				// Cve: &ocsf.Cve{Uid: "2023-1234"},
				AffectedCode: []*ocsf.AffectedCode{{File: &ocsf.File{Name: "pkg:docker/my-app@sha256:f1..."}, StartLine: int32Ptr(1)}},
			}},
		},
	}

	actualFindings := []*ocsf.VulnerabilityFinding{
		{ // Matches G102 perfectly
			FindingInfo: &ocsf.FindingInfo{Uid: "G102", Title: "Outdated Container", DataSources: []string{containerDataSource}},
			Vulnerabilities: []*ocsf.Vulnerability{{
				// Cve: &ocsf.Cve{Uid: "2023-1234"},
				AffectedCode: []*ocsf.AffectedCode{{File: &ocsf.File{Name: "pkg:docker/my-app@sha256:f1..."}, StartLine: int32Ptr(1)}},
			}},
		},
		//{ // Matches G101, but has a different title and repo URL
		//	FindingInfo: &ocsf.FindingInfo{Uid: "G101", Title: "SQL Injection FOUND", DataSources: []string{`{"targetType": 1, "uri": {"path": "file://user.go"}, "fileFindingLocationData": {"startLine": 50, "endLine": 55}, "sourceCodeMetadata": {"repositoryUrl": "https://github.com/my-org/DIFFERENT-repo", "reference": "refs/heads/main"}}`}},
		//	Vulnerabilities: []*ocsf.Vulnerability{{
		//		Cwe:          &ocsf.Cwe{Uid: "89"},
		//		AffectedCode: []*ocsf.AffectedCode{{File: &ocsf.File{Name: "user.go"}, StartLine: int32Ptr(50)}},
		//	}},
		//},
		//{ // Extra finding not in expected list
		//	FindingInfo: &ocsf.FindingInfo{Uid: "G103", Title: "New Issue", DataSources: []string{websiteDataSource}},
		//	Vulnerabilities: []*ocsf.Vulnerability{{
		//		AffectedCode: []*ocsf.AffectedCode{{File: &ocsf.File{Name: "https://example.com/login"}, StartLine: int32Ptr(25)}},
		//	}},
		//},
	}

	AssertFindingListsMatch(t, expectedFindings, actualFindings)
}

// Example usage of the new assertion helper function
func TestVulnerabilityFindingValidation(t *testing.T) {
	// A valid finding that should pass all assertions
	validFinding := &ocsf.VulnerabilityFinding{
		FindingInfo: &ocsf.FindingInfo{
			Uid:   "G112",
			Title: "Uncontrolled Resource Consumption",
			// --- CORRECTED: JSON string is now a single object, not an array ---
			DataSources: []string{`{
				"targetType": 1,
				"uri": {"path": "file://src/main.go"},
				"fileFindingLocationData": {"startLine": 10, "endLine": 15},
				"sourceCodeMetadata": {"repositoryUrl": "https://github.com/my-org/my-repo", "reference": "refs/heads/main"}
			}`},
		},
		Vulnerabilities: []*ocsf.Vulnerability{
			{
				Cwe: &ocsf.Cwe{Uid: "400"},
				AffectedCode: []*ocsf.AffectedCode{{
					File:      &ocsf.File{Name: "src/main.go"},
					StartLine: int32Ptr(10),
					EndLine:   int32Ptr(15),
				}},
			},
		},
	}

	// An invalid finding with multiple errors
	//invalidFinding := &ocsf.VulnerabilityFinding{
	//	FindingInfo: &ocsf.FindingInfo{
	//		Uid:   "", // Invalid: empty UID
	//		Title: "Some Title",
	//		// --- CORRECTED: JSON string is now a single object, not an array ---
	//		DataSources: []string{`{
	//			"targetType": 1,
	//			"uri": {"path": ""},
	//			"fileFindingLocationData": {"startLine": 10, "endLine": 5}
	//		}`}, // Invalid: empty path and endLine < startLine
	//	},
	//	Vulnerabilities: []*ocsf.Vulnerability{}, // Invalid: should have 1
	//}

	t.Run("Valid Finding", func(t *testing.T) {
		AssertVulnerabilityFindingIsValid(t, validFinding)
	})

	//t.Run("Invalid Finding", func(t *testing.T) {
	//	AssertVulnerabilityFindingIsValid(t, invalidFinding)
	//})
}

// Helper to create a pointer to an int32, as required by the proto for optional fields.
func int32Ptr(i int32) *int32 {
	return &i
}
