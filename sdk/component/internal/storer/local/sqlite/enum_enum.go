// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package sqlite

import (
	"errors"
	"fmt"
)

const (
	// ColumnNameFindings is a columnName of type findings.
	ColumnNameFindings columnName = "findings"
	// ColumnNameInstanceId is a columnName of type instance_id.
	ColumnNameInstanceId columnName = "instance_id"
	// ColumnNameUpdatedAt is a columnName of type updated_at.
	ColumnNameUpdatedAt columnName = "updated_at"
)

var ErrInvalidcolumnName = errors.New("not a valid columnName")

// String implements the Stringer interface.
func (x columnName) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x columnName) IsValid() bool {
	_, err := ParsecolumnName(string(x))
	return err == nil
}

var _columnNameValue = map[string]columnName{
	"findings":    ColumnNameFindings,
	"instance_id": ColumnNameInstanceId,
	"updated_at":  ColumnNameUpdatedAt,
}

// ParsecolumnName attempts to convert a string to a columnName.
func ParsecolumnName(name string) (columnName, error) {
	if x, ok := _columnNameValue[name]; ok {
		return x, nil
	}
	return columnName(""), fmt.Errorf("%s is %w", name, ErrInvalidcolumnName)
}
