# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from findings_service.v1 import findings_service_pb2 as findings__service_dot_v1_dot_findings__service__pb2


class FindingsServiceStub(object):
    """FindingService is a service that can be implemented to interact with a findings backend.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetFindings = channel.unary_unary(
                '/findings_service.v1.FindingsService/GetFindings',
                request_serializer=findings__service_dot_v1_dot_findings__service__pb2.GetFindingsRequest.SerializeToString,
                response_deserializer=findings__service_dot_v1_dot_findings__service__pb2.GetFindingsResponse.FromString,
                _registered_method=True)
        self.UpdateFindings = channel.unary_unary(
                '/findings_service.v1.FindingsService/UpdateFindings',
                request_serializer=findings__service_dot_v1_dot_findings__service__pb2.UpdateFindingsRequest.SerializeToString,
                response_deserializer=findings__service_dot_v1_dot_findings__service__pb2.UpdateFindingsResponse.FromString,
                _registered_method=True)
        self.CreateFindings = channel.unary_unary(
                '/findings_service.v1.FindingsService/CreateFindings',
                request_serializer=findings__service_dot_v1_dot_findings__service__pb2.CreateFindingsRequest.SerializeToString,
                response_deserializer=findings__service_dot_v1_dot_findings__service__pb2.CreateFindingsResponse.FromString,
                _registered_method=True)


class FindingsServiceServicer(object):
    """FindingService is a service that can be implemented to interact with a findings backend.
    """

    def GetFindings(self, request, context):
        """GetFindings returns a list of findings associated with the passed id.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateFindings(self, request, context):
        """UpdateFindings updates the passed findings by id.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateFindings(self, request, context):
        """CreateFindings creates the passed findings by id.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FindingsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetFindings': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFindings,
                    request_deserializer=findings__service_dot_v1_dot_findings__service__pb2.GetFindingsRequest.FromString,
                    response_serializer=findings__service_dot_v1_dot_findings__service__pb2.GetFindingsResponse.SerializeToString,
            ),
            'UpdateFindings': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateFindings,
                    request_deserializer=findings__service_dot_v1_dot_findings__service__pb2.UpdateFindingsRequest.FromString,
                    response_serializer=findings__service_dot_v1_dot_findings__service__pb2.UpdateFindingsResponse.SerializeToString,
            ),
            'CreateFindings': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateFindings,
                    request_deserializer=findings__service_dot_v1_dot_findings__service__pb2.CreateFindingsRequest.FromString,
                    response_serializer=findings__service_dot_v1_dot_findings__service__pb2.CreateFindingsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'findings_service.v1.FindingsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('findings_service.v1.FindingsService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class FindingsService(object):
    """FindingService is a service that can be implemented to interact with a findings backend.
    """

    @staticmethod
    def GetFindings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/findings_service.v1.FindingsService/GetFindings',
            findings__service_dot_v1_dot_findings__service__pb2.GetFindingsRequest.SerializeToString,
            findings__service_dot_v1_dot_findings__service__pb2.GetFindingsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateFindings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/findings_service.v1.FindingsService/UpdateFindings',
            findings__service_dot_v1_dot_findings__service__pb2.UpdateFindingsRequest.SerializeToString,
            findings__service_dot_v1_dot_findings__service__pb2.UpdateFindingsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateFindings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/findings_service.v1.FindingsService/CreateFindings',
            findings__service_dot_v1_dot_findings__service__pb2.CreateFindingsRequest.SerializeToString,
            findings__service_dot_v1_dot_findings__service__pb2.CreateFindingsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
