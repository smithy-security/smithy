// Code generated by MockGen. DO NOT EDIT.
// Source: internal/images/docker/builder.go
//
// Generated by this command:
//
//	mockgen -package docker -source internal/images/docker/builder.go -destination internal/images/docker/docker_builder_mock.go
//

// Package docker is a generated GoMock package.
package docker

import (
	context "context"
	io "io"
	reflect "reflect"

	types "github.com/docker/docker/api/types"
	gomock "go.uber.org/mock/gomock"
)

// MockdockerBuilder is a mock of dockerBuilder interface.
type MockdockerBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockdockerBuilderMockRecorder
	isgomock struct{}
}

// MockdockerBuilderMockRecorder is the mock recorder for MockdockerBuilder.
type MockdockerBuilderMockRecorder struct {
	mock *MockdockerBuilder
}

// NewMockdockerBuilder creates a new mock instance.
func NewMockdockerBuilder(ctrl *gomock.Controller) *MockdockerBuilder {
	mock := &MockdockerBuilder{ctrl: ctrl}
	mock.recorder = &MockdockerBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdockerBuilder) EXPECT() *MockdockerBuilderMockRecorder {
	return m.recorder
}

// ImageBuild mocks base method.
func (m *MockdockerBuilder) ImageBuild(ctx context.Context, buildContext io.Reader, options types.ImageBuildOptions) (types.ImageBuildResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageBuild", ctx, buildContext, options)
	ret0, _ := ret[0].(types.ImageBuildResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageBuild indicates an expected call of ImageBuild.
func (mr *MockdockerBuilderMockRecorder) ImageBuild(ctx, buildContext, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageBuild", reflect.TypeOf((*MockdockerBuilder)(nil).ImageBuild), ctx, buildContext, options)
}

// ServerVersion mocks base method.
func (m *MockdockerBuilder) ServerVersion(ctx context.Context) (types.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerVersion", ctx)
	ret0, _ := ret[0].(types.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerVersion indicates an expected call of ServerVersion.
func (mr *MockdockerBuilderMockRecorder) ServerVersion(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerVersion", reflect.TypeOf((*MockdockerBuilder)(nil).ServerVersion), ctx)
}
