// Code generated by MockGen. DO NOT EDIT.
// Source: internal/engine/engine.go
//
// Generated by this command:
//
//	mockgen -package engine_test -source internal/engine/engine.go -destination internal/engine/engine_mock_test.go ContainerExecutor
//

// Package engine_test is a generated GoMock package.
package engine_test

import (
	context "context"
	reflect "reflect"

	engine "github.com/smithy-security/smithy/smithyctl/internal/engine"
	gomock "go.uber.org/mock/gomock"
)

// MockContainerExecutor is a mock of ContainerExecutor interface.
type MockContainerExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockContainerExecutorMockRecorder
	isgomock struct{}
}

// MockContainerExecutorMockRecorder is the mock recorder for MockContainerExecutor.
type MockContainerExecutorMockRecorder struct {
	mock *MockContainerExecutor
}

// NewMockContainerExecutor creates a new mock instance.
func NewMockContainerExecutor(ctrl *gomock.Controller) *MockContainerExecutor {
	mock := &MockContainerExecutor{ctrl: ctrl}
	mock.recorder = &MockContainerExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContainerExecutor) EXPECT() *MockContainerExecutorMockRecorder {
	return m.recorder
}

// RunAndWait mocks base method.
func (m *MockContainerExecutor) RunAndWait(ctx context.Context, conf engine.ContainerConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunAndWait", ctx, conf)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunAndWait indicates an expected call of RunAndWait.
func (mr *MockContainerExecutorMockRecorder) RunAndWait(ctx, conf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunAndWait", reflect.TypeOf((*MockContainerExecutor)(nil).RunAndWait), ctx, conf)
}
