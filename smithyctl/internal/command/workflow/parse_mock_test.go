// Code generated by MockGen. DO NOT EDIT.
// Source: internal/command/workflow/parse.go
//
// Generated by this command:
//
//	mockgen -package workflow -source internal/command/workflow/parse.go -destination internal/command/workflow/parse_mock_test.go ComponentFetcher
//

// Package workflow is a generated GoMock package.
package workflow

import (
	"context"
	"reflect"

	"github.com/distribution/reference"
	v1 "github.com/smithy-security/smithy/pkg/types/v1"
	"github.com/smithy-security/smithy/smithyctl/images"
	"github.com/smithy-security/smithy/smithyctl/registry"
	"go.uber.org/mock/gomock"
)

// MockComponentFetcher is a mock of ComponentFetcher interface.
type MockComponentFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockComponentFetcherMockRecorder
	isgomock struct{}
}

// MockComponentFetcherMockRecorder is the mock recorder for MockComponentFetcher.
type MockComponentFetcherMockRecorder struct {
	mock *MockComponentFetcher
}

// NewMockComponentFetcher creates a new mock instance.
func NewMockComponentFetcher(ctrl *gomock.Controller) *MockComponentFetcher {
	mock := &MockComponentFetcher{ctrl: ctrl}
	mock.recorder = &MockComponentFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComponentFetcher) EXPECT() *MockComponentFetcherMockRecorder {
	return m.recorder
}

// FetchPackage mocks base method.
func (m *MockComponentFetcher) FetchPackage(ctx context.Context, ref reference.Reference) (*registry.FetchPackageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPackage", ctx, ref)
	ret0, _ := ret[0].(*registry.FetchPackageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchPackage indicates an expected call of FetchPackage.
func (mr *MockComponentFetcherMockRecorder) FetchPackage(ctx, ref any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPackage", reflect.TypeOf((*MockComponentFetcher)(nil).FetchPackage), ctx, ref)
}

// MockComponentParser is a mock of ComponentParser interface.
type MockComponentParser struct {
	ctrl     *gomock.Controller
	recorder *MockComponentParserMockRecorder
	isgomock struct{}
}

// MockComponentParserMockRecorder is the mock recorder for MockComponentParser.
type MockComponentParserMockRecorder struct {
	mock *MockComponentParser
}

// NewMockComponentParser creates a new mock instance.
func NewMockComponentParser(ctrl *gomock.Controller) *MockComponentParser {
	mock := &MockComponentParser{ctrl: ctrl}
	mock.recorder = &MockComponentParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComponentParser) EXPECT() *MockComponentParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockComponentParser) Parse(path string) (*v1.Component, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", path)
	ret0, _ := ret[0].(*v1.Component)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockComponentParserMockRecorder) Parse(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockComponentParser)(nil).Parse), path)
}

// MockComponentImageResolver is a mock of ComponentImageResolver interface.
type MockComponentImageResolver struct {
	ctrl     *gomock.Controller
	recorder *MockComponentImageResolverMockRecorder
	isgomock struct{}
}

// MockComponentImageResolverMockRecorder is the mock recorder for MockComponentImageResolver.
type MockComponentImageResolverMockRecorder struct {
	mock *MockComponentImageResolver
}

// NewMockComponentImageResolver creates a new mock instance.
func NewMockComponentImageResolver(ctrl *gomock.Controller) *MockComponentImageResolver {
	mock := &MockComponentImageResolver{ctrl: ctrl}
	mock.recorder = &MockComponentImageResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComponentImageResolver) EXPECT() *MockComponentImageResolverMockRecorder {
	return m.recorder
}

// Local mocks base method.
func (m *MockComponentImageResolver) Local(arg0 context.Context, arg1 string) (images.Resolver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Local", arg0, arg1)
	ret0, _ := ret[0].(images.Resolver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Local indicates an expected call of Local.
func (mr *MockComponentImageResolverMockRecorder) Local(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Local", reflect.TypeOf((*MockComponentImageResolver)(nil).Local), arg0, arg1)
}

// Remote mocks base method.
func (m *MockComponentImageResolver) Remote() (images.Resolver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remote")
	ret0, _ := ret[0].(images.Resolver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Remote indicates an expected call of Remote.
func (mr *MockComponentImageResolverMockRecorder) Remote() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remote", reflect.TypeOf((*MockComponentImageResolver)(nil).Remote))
}
