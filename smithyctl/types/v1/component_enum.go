// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package v1

import (
	"errors"
	"fmt"
)

const (
	// ComponentTypeUnknown is a ComponentType of type unknown.
	ComponentTypeUnknown ComponentType = "unknown"
	// ComponentTypeTarget is a ComponentType of type target.
	ComponentTypeTarget ComponentType = "target"
	// ComponentTypeScanner is a ComponentType of type scanner.
	ComponentTypeScanner ComponentType = "scanner"
	// ComponentTypeEnricher is a ComponentType of type enricher.
	ComponentTypeEnricher ComponentType = "enricher"
	// ComponentTypeFilter is a ComponentType of type filter.
	ComponentTypeFilter ComponentType = "filter"
	// ComponentTypeReporter is a ComponentType of type reporter.
	ComponentTypeReporter ComponentType = "reporter"
)

var ErrInvalidComponentType = errors.New("not a valid ComponentType")

// String implements the Stringer interface.
func (x ComponentType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ComponentType) IsValid() bool {
	_, err := ParseComponentType(string(x))
	return err == nil
}

var _ComponentTypeValue = map[string]ComponentType{
	"unknown":  ComponentTypeUnknown,
	"target":   ComponentTypeTarget,
	"scanner":  ComponentTypeScanner,
	"enricher": ComponentTypeEnricher,
	"filter":   ComponentTypeFilter,
	"reporter": ComponentTypeReporter,
}

// ParseComponentType attempts to convert a string to a ComponentType.
func ParseComponentType(name string) (ComponentType, error) {
	if x, ok := _ComponentTypeValue[name]; ok {
		return x, nil
	}
	return ComponentType(""), fmt.Errorf("%s is %w", name, ErrInvalidComponentType)
}

const (
	// StepTypeUnknown is a StepType of type unknown.
	StepTypeUnknown StepType = "unknown"
	// StepTypeContainer is a StepType of type container.
	StepTypeContainer StepType = "container"
	// StepTypeBinary is a StepType of type binary.
	StepTypeBinary StepType = "binary"
)

var ErrInvalidStepType = errors.New("not a valid StepType")

// String implements the Stringer interface.
func (x StepType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x StepType) IsValid() bool {
	_, err := ParseStepType(string(x))
	return err == nil
}

var _StepTypeValue = map[string]StepType{
	"unknown":   StepTypeUnknown,
	"container": StepTypeContainer,
	"binary":    StepTypeBinary,
}

// ParseStepType attempts to convert a string to a StepType.
func ParseStepType(name string) (StepType, error) {
	if x, ok := _StepTypeValue[name]; ok {
		return x, nil
	}
	return StepType(""), fmt.Errorf("%s is %w", name, ErrInvalidStepType)
}
