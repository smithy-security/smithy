// Code generated by MockGen. DO NOT EDIT.
// Source: internal/images/types.go
//
// Generated by this command:
//
//	mockgen -package images -source internal/images/types.go -destination internal/images/mocks.go
//

// Package images is a generated GoMock package.
package images

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockResolver is a mock of Resolver interface.
type MockResolver struct {
	ctrl     *gomock.Controller
	recorder *MockResolverMockRecorder
	isgomock struct{}
}

// MockResolverMockRecorder is the mock recorder for MockResolver.
type MockResolverMockRecorder struct {
	mock *MockResolver
}

// NewMockResolver creates a new mock instance.
func NewMockResolver(ctrl *gomock.Controller) *MockResolver {
	mock := &MockResolver{ctrl: ctrl}
	mock.recorder = &MockResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResolver) EXPECT() *MockResolverMockRecorder {
	return m.recorder
}

// Report mocks base method.
func (m *MockResolver) Report() Report {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Report")
	ret0, _ := ret[0].(Report)
	return ret0
}

// Report indicates an expected call of Report.
func (mr *MockResolverMockRecorder) Report() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Report", reflect.TypeOf((*MockResolver)(nil).Report))
}

// Resolve mocks base method.
func (m *MockResolver) Resolve(ctx context.Context, imageRef string, options ...ResolutionOptionFn) (string, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, imageRef}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Resolve", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resolve indicates an expected call of Resolve.
func (mr *MockResolverMockRecorder) Resolve(ctx, imageRef any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, imageRef}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockResolver)(nil).Resolve), varargs...)
}

// MockBuilder is a mock of Builder interface.
type MockBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockBuilderMockRecorder
	isgomock struct{}
}

// MockBuilderMockRecorder is the mock recorder for MockBuilder.
type MockBuilderMockRecorder struct {
	mock *MockBuilder
}

// NewMockBuilder creates a new mock instance.
func NewMockBuilder(ctrl *gomock.Controller) *MockBuilder {
	mock := &MockBuilder{ctrl: ctrl}
	mock.recorder = &MockBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuilder) EXPECT() *MockBuilderMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockBuilder) Build(ctx context.Context, cr *ComponentRepository) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", ctx, cr)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Build indicates an expected call of Build.
func (mr *MockBuilderMockRecorder) Build(ctx, cr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockBuilder)(nil).Build), ctx, cr)
}

// Report mocks base method.
func (m *MockBuilder) Report() Report {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Report")
	ret0, _ := ret[0].(Report)
	return ret0
}

// Report indicates an expected call of Report.
func (mr *MockBuilderMockRecorder) Report() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Report", reflect.TypeOf((*MockBuilder)(nil).Report))
}

// MockImageRepoProcessor is a mock of ImageRepoProcessor interface.
type MockImageRepoProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockImageRepoProcessorMockRecorder
	isgomock struct{}
}

// MockImageRepoProcessorMockRecorder is the mock recorder for MockImageRepoProcessor.
type MockImageRepoProcessorMockRecorder struct {
	mock *MockImageRepoProcessor
}

// NewMockImageRepoProcessor creates a new mock instance.
func NewMockImageRepoProcessor(ctrl *gomock.Controller) *MockImageRepoProcessor {
	mock := &MockImageRepoProcessor{ctrl: ctrl}
	mock.recorder = &MockImageRepoProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageRepoProcessor) EXPECT() *MockImageRepoProcessorMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockImageRepoProcessor) Process(repo string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", repo)
	ret0, _ := ret[0].(string)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockImageRepoProcessorMockRecorder) Process(repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockImageRepoProcessor)(nil).Process), repo)
}
