---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: producer-semgrep
  labels:
    v1.smithy.smithy-security.com/component: producer
    v1.smithy.smithy-security.com/test-type: sast
spec:
  description: Analyse source code using Semgrep to look for security issues.
  params:
  - name: producer-semgrep-rules-yaml
    type: string
    default: |
      rules: []
  - name: producer-semgrep-config-value
    type: string
    default: auto
  volumes:
    - name: scratch
      emptyDir: {}
  workspaces:
    - name: output
      description: The workspace containing the source-code to scan.
  steps:
  - name: write-semgrep-config
    image: docker.io/library/busybox:1.36
    env:
      - name: SEMGREP_CONFIG
        value: $(params.producer-semgrep-rules-yaml)
    script: |
      printf '%s' "${SEMGREP_CONFIG}" > "$(workspaces.scratch.path)/semgrep-rules.yaml"
      cat $(workspaces.scratch.path)/semgrep-rules.yaml
  - name: run-semgrep
    image: docker.io/returntocorp/semgrep:1.80
    command: ["semgrep"]
    args:
    - "scan"
    - "--config"
    - "$(workspaces.scratch.path)/semgrep-rules.yaml"
    - "--config=$(params.producer-semgrep-config-value)"
    - "--json"
    - "--output"
    - "$(workspaces.scratch.path)/out.json"
    - "$(workspaces.source-code.path)"
  - name: produce-issues
    imagePullPolicy: IfNotPresent
    image: '{{ default "ghcr.io/smithy-security/smithy" .Values.image.registry }}/components/producers/semgrep:{{ .Chart.AppVersion }}'
    command: ["/app/components/producers/semgrep/semgrep-parser"]
    args:
    - "-in=$(workspaces.scratch.path)/out.json"
    - "-out=$(workspaces.scratch.path)/semgrep.pb"
