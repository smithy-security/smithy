// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFindings = `-- name: CreateFindings :exec
INSERT INTO finding (instance_id, details) VALUES (
unnest($1::uuid[]),
unnest($2::jsonb[])
)
`

type CreateFindingsParams struct {
	InstanceIDArray []pgtype.UUID
	DetailsArray    [][]byte
}

func (q *Queries) CreateFindings(ctx context.Context, arg CreateFindingsParams) error {
	_, err := q.db.Exec(ctx, createFindings, arg.InstanceIDArray, arg.DetailsArray)
	return err
}

const findingsByID = `-- name: FindingsByID :many
SELECT id, details
    FROM finding
    WHERE instance_id = $1
    ORDER BY id ASC
`

type FindingsByIDRow struct {
	ID      int32
	Details []byte
}

func (q *Queries) FindingsByID(ctx context.Context, instanceID pgtype.UUID) ([]FindingsByIDRow, error) {
	rows, err := q.db.Query(ctx, findingsByID, instanceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindingsByIDRow
	for rows.Next() {
		var i FindingsByIDRow
		if err := rows.Scan(&i.ID, &i.Details); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFinding = `-- name: UpdateFinding :exec
UPDATE finding
SET
    details = $1,
    updated_at = $2
WHERE
    instance_id = $3 AND id = $4
RETURNING id, instance_id, details, created_at, updated_at
`

type UpdateFindingParams struct {
	Details    []byte
	UpdatedAt  pgtype.Timestamp
	InstanceID pgtype.UUID
	ID         int32
}

func (q *Queries) UpdateFinding(ctx context.Context, arg UpdateFindingParams) error {
	_, err := q.db.Exec(ctx, updateFinding,
		arg.Details,
		arg.UpdatedAt,
		arg.InstanceID,
		arg.ID,
	)
	return err
}
