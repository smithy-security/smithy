// Code generated by MockGen. DO NOT EDIT.
// Source: internal/issuer/jira/client.go
//
// Generated by this command:
//
//	mockgen -package jira_test -source internal/issuer/jira/client.go -destination internal/issuer/jira/client_mock_test.go IssueCreator,UserGetter
//

// Package jira_test is a generated GoMock package.
package jira_test

import (
	context "context"
	reflect "reflect"

	jira "github.com/andygrunwald/go-jira"
	gomock "go.uber.org/mock/gomock"
)

// MockIssueCreator is a mock of IssueCreator interface.
type MockIssueCreator struct {
	ctrl     *gomock.Controller
	recorder *MockIssueCreatorMockRecorder
	isgomock struct{}
}

// MockIssueCreatorMockRecorder is the mock recorder for MockIssueCreator.
type MockIssueCreatorMockRecorder struct {
	mock *MockIssueCreator
}

// NewMockIssueCreator creates a new mock instance.
func NewMockIssueCreator(ctrl *gomock.Controller) *MockIssueCreator {
	mock := &MockIssueCreator{ctrl: ctrl}
	mock.recorder = &MockIssueCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssueCreator) EXPECT() *MockIssueCreatorMockRecorder {
	return m.recorder
}

// CreateWithContext mocks base method.
func (m *MockIssueCreator) CreateWithContext(ctx context.Context, issue *jira.Issue) (*jira.Issue, *jira.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithContext", ctx, issue)
	ret0, _ := ret[0].(*jira.Issue)
	ret1, _ := ret[1].(*jira.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateWithContext indicates an expected call of CreateWithContext.
func (mr *MockIssueCreatorMockRecorder) CreateWithContext(ctx, issue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithContext", reflect.TypeOf((*MockIssueCreator)(nil).CreateWithContext), ctx, issue)
}

// MockUserGetter is a mock of UserGetter interface.
type MockUserGetter struct {
	ctrl     *gomock.Controller
	recorder *MockUserGetterMockRecorder
	isgomock struct{}
}

// MockUserGetterMockRecorder is the mock recorder for MockUserGetter.
type MockUserGetterMockRecorder struct {
	mock *MockUserGetter
}

// NewMockUserGetter creates a new mock instance.
func NewMockUserGetter(ctrl *gomock.Controller) *MockUserGetter {
	mock := &MockUserGetter{ctrl: ctrl}
	mock.recorder = &MockUserGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserGetter) EXPECT() *MockUserGetterMockRecorder {
	return m.recorder
}

// GetSelfWithContext mocks base method.
func (m *MockUserGetter) GetSelfWithContext(ctx context.Context) (*jira.User, *jira.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSelfWithContext", ctx)
	ret0, _ := ret[0].(*jira.User)
	ret1, _ := ret[1].(*jira.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSelfWithContext indicates an expected call of GetSelfWithContext.
func (mr *MockUserGetterMockRecorder) GetSelfWithContext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSelfWithContext", reflect.TypeOf((*MockUserGetter)(nil).GetSelfWithContext), ctx)
}
