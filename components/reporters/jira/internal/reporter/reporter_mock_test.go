// Code generated by MockGen. DO NOT EDIT.
// Source: internal/reporter/reporter.go
//
// Generated by this command:
//
//	mockgen -package reporter_test -source internal/reporter/reporter.go -destination internal/reporter/reporter_mock_test.go IssueCreator
//

// Package reporter_test is a generated GoMock package.
package reporter_test

import (
	context "context"
	reflect "reflect"

	issuer "github.com/smithy-security/smithy/components/reporters/jira/internal/issuer"
	gomock "go.uber.org/mock/gomock"
)

// MockIssueCreator is a mock of IssueCreator interface.
type MockIssueCreator struct {
	ctrl     *gomock.Controller
	recorder *MockIssueCreatorMockRecorder
	isgomock struct{}
}

// MockIssueCreatorMockRecorder is the mock recorder for MockIssueCreator.
type MockIssueCreatorMockRecorder struct {
	mock *MockIssueCreator
}

// NewMockIssueCreator creates a new mock instance.
func NewMockIssueCreator(ctrl *gomock.Controller) *MockIssueCreator {
	mock := &MockIssueCreator{ctrl: ctrl}
	mock.recorder = &MockIssueCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssueCreator) EXPECT() *MockIssueCreatorMockRecorder {
	return m.recorder
}

// BatchCreate mocks base method.
func (m *MockIssueCreator) BatchCreate(ctx context.Context, issues []issuer.Issue) (uint, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreate", ctx, issues)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BatchCreate indicates an expected call of BatchCreate.
func (mr *MockIssueCreatorMockRecorder) BatchCreate(ctx, issues any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreate", reflect.TypeOf((*MockIssueCreator)(nil).BatchCreate), ctx, issues)
}
