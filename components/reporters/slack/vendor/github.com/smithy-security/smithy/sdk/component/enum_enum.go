// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package component

import (
	"errors"
	"fmt"
)

const (
	// RunnerConfigLoggingLevelDebug is a RunnerConfigLoggingLevel of type debug.
	RunnerConfigLoggingLevelDebug RunnerConfigLoggingLevel = "debug"
	// RunnerConfigLoggingLevelInfo is a RunnerConfigLoggingLevel of type info.
	RunnerConfigLoggingLevelInfo RunnerConfigLoggingLevel = "info"
	// RunnerConfigLoggingLevelError is a RunnerConfigLoggingLevel of type error.
	RunnerConfigLoggingLevelError RunnerConfigLoggingLevel = "error"
	// RunnerConfigLoggingLevelWarn is a RunnerConfigLoggingLevel of type warn.
	RunnerConfigLoggingLevelWarn RunnerConfigLoggingLevel = "warn"
)

var ErrInvalidRunnerConfigLoggingLevel = errors.New("not a valid RunnerConfigLoggingLevel")

// String implements the Stringer interface.
func (x RunnerConfigLoggingLevel) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x RunnerConfigLoggingLevel) IsValid() bool {
	_, err := ParseRunnerConfigLoggingLevel(string(x))
	return err == nil
}

var _RunnerConfigLoggingLevelValue = map[string]RunnerConfigLoggingLevel{
	"debug": RunnerConfigLoggingLevelDebug,
	"info":  RunnerConfigLoggingLevelInfo,
	"error": RunnerConfigLoggingLevelError,
	"warn":  RunnerConfigLoggingLevelWarn,
}

// ParseRunnerConfigLoggingLevel attempts to convert a string to a RunnerConfigLoggingLevel.
func ParseRunnerConfigLoggingLevel(name string) (RunnerConfigLoggingLevel, error) {
	if x, ok := _RunnerConfigLoggingLevelValue[name]; ok {
		return x, nil
	}
	return RunnerConfigLoggingLevel(""), fmt.Errorf("%s is %w", name, ErrInvalidRunnerConfigLoggingLevel)
}

const (
	// StoreTypeSqlite is a StoreType of type sqlite.
	StoreTypeSqlite StoreType = "sqlite"
	// StoreTypePostgresql is a StoreType of type postgresql.
	StoreTypePostgresql StoreType = "postgresql"
	// StoreTypeFindingsClient is a StoreType of type findings-client.
	StoreTypeFindingsClient StoreType = "findings-client"
)

var ErrInvalidStoreType = errors.New("not a valid StoreType")

// String implements the Stringer interface.
func (x StoreType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x StoreType) IsValid() bool {
	_, err := ParseStoreType(string(x))
	return err == nil
}

var _StoreTypeValue = map[string]StoreType{
	"sqlite":          StoreTypeSqlite,
	"postgresql":      StoreTypePostgresql,
	"findings-client": StoreTypeFindingsClient,
}

// ParseStoreType attempts to convert a string to a StoreType.
func ParseStoreType(name string) (StoreType, error) {
	if x, ok := _StoreTypeValue[name]; ok {
		return x, nil
	}
	return StoreType(""), fmt.Errorf("%s is %w", name, ErrInvalidStoreType)
}
