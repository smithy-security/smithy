// Code generated by MockGen. DO NOT EDIT.
// Source: internal/reporter/reporter.go
//
// Generated by this command:
//
//	mockgen -package reporter_test -source internal/reporter/reporter.go -destination internal/reporter/reporter_mock_test.go
//

// Package reporter_test is a generated GoMock package.
package reporter_test

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockReporter is a mock of Reporter interface.
type MockReporter struct {
	ctrl     *gomock.Controller
	recorder *MockReporterMockRecorder
	isgomock struct{}
}

// MockReporterMockRecorder is the mock recorder for MockReporter.
type MockReporterMockRecorder struct {
	mock *MockReporter
}

// NewMockReporter creates a new mock instance.
func NewMockReporter(ctrl *gomock.Controller) *MockReporter {
	mock := &MockReporter{ctrl: ctrl}
	mock.recorder = &MockReporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReporter) EXPECT() *MockReporterMockRecorder {
	return m.recorder
}

// Report mocks base method.
func (m *MockReporter) Report(arg0 string, arg1 ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Report", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Report indicates an expected call of Report.
func (mr *MockReporterMockRecorder) Report(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Report", reflect.TypeOf((*MockReporter)(nil).Report), varargs...)
}
