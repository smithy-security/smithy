// Code generated by MockGen. DO NOT EDIT.
// Source: orchestrator.go

// Package orchestrator is a generated GoMock package.
package orchestrator

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockMobSFService is a mock of MobSFService interface.
type MockMobSFService struct {
	ctrl     *gomock.Controller
	recorder *MockMobSFServiceMockRecorder
}

// MockMobSFServiceMockRecorder is the mock recorder for MockMobSFService.
type MockMobSFServiceMockRecorder struct {
	mock *MockMobSFService
}

// NewMockMobSFService creates a new mock instance.
func NewMockMobSFService(ctrl *gomock.Controller) *MockMobSFService {
	mock := &MockMobSFService{ctrl: ctrl}
	mock.recorder = &MockMobSFServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMobSFService) EXPECT() *MockMobSFServiceMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockMobSFService) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockMobSFServiceMockRecorder) Start(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockMobSFService)(nil).Start), ctx)
}

// Stop mocks base method.
func (m *MockMobSFService) Stop(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockMobSFServiceMockRecorder) Stop(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockMobSFService)(nil).Stop), ctx)
}

// WaitForReady mocks base method.
func (m *MockMobSFService) WaitForReady(ctx context.Context, timeout time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForReady", ctx, timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForReady indicates an expected call of WaitForReady.
func (mr *MockMobSFServiceMockRecorder) WaitForReady(ctx, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForReady", reflect.TypeOf((*MockMobSFService)(nil).WaitForReady), ctx, timeout)
}
