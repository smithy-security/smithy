// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package client is a generated GoMock package.
package orchestrator

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	"github.com/smithy-security/smithy/components/scanners/mobsf/scanner/internal/client"
)

// MockMobSFClient is a mock of MobSFClient interface.
type MockMobSFClient struct {
	ctrl     *gomock.Controller
	recorder *MockMobSFClientMockRecorder
}

// MockMobSFClientMockRecorder is the mock recorder for MockMobSFClient.
type MockMobSFClientMockRecorder struct {
	mock *MockMobSFClient
}

// NewMockMobSFClient creates a new mock instance.
func NewMockMobSFClient(ctrl *gomock.Controller) *MockMobSFClient {
	mock := &MockMobSFClient{ctrl: ctrl}
	mock.recorder = &MockMobSFClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMobSFClient) EXPECT() *MockMobSFClientMockRecorder {
	return m.recorder
}

// GenerateReport mocks base method.
func (m *MockMobSFClient) GenerateReport(ctx context.Context, hash string) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateReport", ctx, hash)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateReport indicates an expected call of GenerateReport.
func (mr *MockMobSFClientMockRecorder) GenerateReport(ctx, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateReport", reflect.TypeOf((*MockMobSFClient)(nil).GenerateReport), ctx, hash)
}

// ListScans mocks base method.
func (m *MockMobSFClient) ListScans(ctx context.Context) (*client.ScanListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListScans", ctx)
	ret0, _ := ret[0].(*client.ScanListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListScans indicates an expected call of ListScans.
func (mr *MockMobSFClientMockRecorder) ListScans(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListScans", reflect.TypeOf((*MockMobSFClient)(nil).ListScans), ctx)
}

// StartScan mocks base method.
func (m *MockMobSFClient) StartScan(ctx context.Context, fileHash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartScan", ctx, fileHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartScan indicates an expected call of StartScan.
func (mr *MockMobSFClientMockRecorder) StartScan(ctx, fileHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartScan", reflect.TypeOf((*MockMobSFClient)(nil).StartScan), ctx, fileHash)
}

// UploadFile mocks base method.
func (m *MockMobSFClient) UploadFile(ctx context.Context, fileName string, fileData []byte) (*client.UploadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", ctx, fileName, fileData)
	ret0, _ := ret[0].(*client.UploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockMobSFClientMockRecorder) UploadFile(ctx, fileName, fileData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockMobSFClient)(nil).UploadFile), ctx, fileName, fileData)
}

// WaitForScanCompletion mocks base method.
func (m *MockMobSFClient) WaitForScanCompletion(ctx context.Context, scanHash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForScanCompletion", ctx, scanHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForScanCompletion indicates an expected call of WaitForScanCompletion.
func (mr *MockMobSFClientMockRecorder) WaitForScanCompletion(ctx, scanHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForScanCompletion", reflect.TypeOf((*MockMobSFClient)(nil).WaitForScanCompletion), ctx, scanHash)
}
