// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: findings_service/v1/findings_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FindingsService_GetFindings_FullMethodName    = "/findings_service.v1.FindingsService/GetFindings"
	FindingsService_UpdateFindings_FullMethodName = "/findings_service.v1.FindingsService/UpdateFindings"
	FindingsService_CreateFindings_FullMethodName = "/findings_service.v1.FindingsService/CreateFindings"
)

// FindingsServiceClient is the client API for FindingsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// FindingService is a service that can be implemented to interact with a findings backend.
type FindingsServiceClient interface {
	// GetFindings returns a list of findings associated with the passed id.
	GetFindings(ctx context.Context, in *GetFindingsRequest, opts ...grpc.CallOption) (*GetFindingsResponse, error)
	// UpdateFindings updates the passed findings by id.
	UpdateFindings(ctx context.Context, in *UpdateFindingsRequest, opts ...grpc.CallOption) (*UpdateFindingsResponse, error)
	// CreateFindings creates the passed findings by id.
	CreateFindings(ctx context.Context, in *CreateFindingsRequest, opts ...grpc.CallOption) (*CreateFindingsResponse, error)
}

type findingsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFindingsServiceClient(cc grpc.ClientConnInterface) FindingsServiceClient {
	return &findingsServiceClient{cc}
}

func (c *findingsServiceClient) GetFindings(ctx context.Context, in *GetFindingsRequest, opts ...grpc.CallOption) (*GetFindingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFindingsResponse)
	err := c.cc.Invoke(ctx, FindingsService_GetFindings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *findingsServiceClient) UpdateFindings(ctx context.Context, in *UpdateFindingsRequest, opts ...grpc.CallOption) (*UpdateFindingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFindingsResponse)
	err := c.cc.Invoke(ctx, FindingsService_UpdateFindings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *findingsServiceClient) CreateFindings(ctx context.Context, in *CreateFindingsRequest, opts ...grpc.CallOption) (*CreateFindingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFindingsResponse)
	err := c.cc.Invoke(ctx, FindingsService_CreateFindings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FindingsServiceServer is the server API for FindingsService service.
// All implementations must embed UnimplementedFindingsServiceServer
// for forward compatibility.
//
// FindingService is a service that can be implemented to interact with a findings backend.
type FindingsServiceServer interface {
	// GetFindings returns a list of findings associated with the passed id.
	GetFindings(context.Context, *GetFindingsRequest) (*GetFindingsResponse, error)
	// UpdateFindings updates the passed findings by id.
	UpdateFindings(context.Context, *UpdateFindingsRequest) (*UpdateFindingsResponse, error)
	// CreateFindings creates the passed findings by id.
	CreateFindings(context.Context, *CreateFindingsRequest) (*CreateFindingsResponse, error)
	mustEmbedUnimplementedFindingsServiceServer()
}

// UnimplementedFindingsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFindingsServiceServer struct{}

func (UnimplementedFindingsServiceServer) GetFindings(context.Context, *GetFindingsRequest) (*GetFindingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFindings not implemented")
}
func (UnimplementedFindingsServiceServer) UpdateFindings(context.Context, *UpdateFindingsRequest) (*UpdateFindingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFindings not implemented")
}
func (UnimplementedFindingsServiceServer) CreateFindings(context.Context, *CreateFindingsRequest) (*CreateFindingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFindings not implemented")
}
func (UnimplementedFindingsServiceServer) mustEmbedUnimplementedFindingsServiceServer() {}
func (UnimplementedFindingsServiceServer) testEmbeddedByValue()                         {}

// UnsafeFindingsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FindingsServiceServer will
// result in compilation errors.
type UnsafeFindingsServiceServer interface {
	mustEmbedUnimplementedFindingsServiceServer()
}

func RegisterFindingsServiceServer(s grpc.ServiceRegistrar, srv FindingsServiceServer) {
	// If the following call pancis, it indicates UnimplementedFindingsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FindingsService_ServiceDesc, srv)
}

func _FindingsService_GetFindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FindingsServiceServer).GetFindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FindingsService_GetFindings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FindingsServiceServer).GetFindings(ctx, req.(*GetFindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FindingsService_UpdateFindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FindingsServiceServer).UpdateFindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FindingsService_UpdateFindings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FindingsServiceServer).UpdateFindings(ctx, req.(*UpdateFindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FindingsService_CreateFindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FindingsServiceServer).CreateFindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FindingsService_CreateFindings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FindingsServiceServer).CreateFindings(ctx, req.(*CreateFindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FindingsService_ServiceDesc is the grpc.ServiceDesc for FindingsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FindingsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "findings_service.v1.FindingsService",
	HandlerType: (*FindingsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFindings",
			Handler:    _FindingsService_GetFindings_Handler,
		},
		{
			MethodName: "UpdateFindings",
			Handler:    _FindingsService_UpdateFindings_Handler,
		},
		{
			MethodName: "CreateFindings",
			Handler:    _FindingsService_CreateFindings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "findings_service/v1/findings_service.proto",
}
