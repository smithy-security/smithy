{
    "version": "2.1.0",
    "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/main/sarif-2.1/schema/sarif-schema-2.1.0.json",
    "runs": [
      {
        "tool": {
          "driver": {
            "informationUri": "https://github.com/google/osv-scanner",
            "name": "osv-scanner",
            "rules": [
              {
                "id": "CVE-2025-22869",
                "name": "CVE-2025-22869",
                "shortDescription": {
                  "text": "CVE-2025-22869: Potential denial of service in golang.org/x/crypto"
                },
                "fullDescription": {
                  "text": "SSH servers which implement file transfer protocols are vulnerable to a denial of service attack from clients which complete the key exchange slowly, or not at all, causing pending content to be read into memory, but never transmitted.",
                  "markdown": "SSH servers which implement file transfer protocols are vulnerable to a denial of service attack from clients which complete the key exchange slowly, or not at all, causing pending content to be read into memory, but never transmitted."
                },
                "deprecatedIds": [
                  "CVE-2025-22869",
                  "GO-2025-3487",
                  "GHSA-hcg3-q754-cr77"
                ],
                "help": {
                  "text": "**Your dependency is vulnerable to [CVE-2025-22869](https://osv.dev/list?q=CVE-2025-22869)**\n(Also published as: [GO-2025-3487](https://osv.dev/vulnerability/GO-2025-3487), [GHSA-hcg3-q754-cr77](https://osv.dev/vulnerability/GHSA-hcg3-q754-cr77), ).\n\n## [GO-2025-3487](https://osv.dev/vulnerability/GO-2025-3487)\n\n<details>\n<summary>Details</summary>\n\n> SSH servers which implement file transfer protocols are vulnerable to a denial of service attack from clients which complete the key exchange slowly, or not at all, causing pending content to be read into memory, but never transmitted.\n\n</details>\n\n## [GHSA-hcg3-q754-cr77](https://osv.dev/vulnerability/GHSA-hcg3-q754-cr77)\n\n<details>\n<summary>Details</summary>\n\n> SSH servers which implement file transfer protocols are vulnerable to a denial of service attack from clients which complete the key exchange slowly, or not at all, causing pending content to be read into memory, but never transmitted.\n\n</details>\n\n---\n\n### Affected Packages\n\n| Source | Package Name | Package Version |\n| --- | --- | --- |\n| lockfile:/code/sample/go.mod | golang.org/x/crypto | 0.24.0 |\n\n## Remediation\n\nTo fix these vulnerabilities, update the vulnerabilities past the listed fixed versions below.\n\n### Fixed Versions\n\n| Vulnerability ID | Package Name | Fixed Version |\n| --- | --- | --- |\n| GHSA-hcg3-q754-cr77 | golang.org/x/crypto | 0.35.0 |\n| GO-2025-3487 | golang.org/x/crypto | 0.35.0 |\n\nIf you believe these vulnerabilities do not affect your code and wish to ignore them, add them to the ignore list in an\n`osv-scanner.toml` file located in the same directory as the lockfile containing the vulnerable dependency.\n\nSee the format and more options in our documentation here: https://google.github.io/osv-scanner/configuration/\n\nAdd or append these values to the following config files to ignore this vulnerability:\n\n`/code/sample/osv-scanner.toml`\n\n```\n[[IgnoredVulns]]\nid = \"CVE-2025-22869\"\nreason = \"Your reason for ignoring this vulnerability\"\n```\n",
                  "markdown": "**Your dependency is vulnerable to [CVE-2025-22869](https://osv.dev/list?q=CVE-2025-22869)**\n(Also published as: [GO-2025-3487](https://osv.dev/vulnerability/GO-2025-3487), [GHSA-hcg3-q754-cr77](https://osv.dev/vulnerability/GHSA-hcg3-q754-cr77), ).\n\n## [GO-2025-3487](https://osv.dev/vulnerability/GO-2025-3487)\n\n<details>\n<summary>Details</summary>\n\n> SSH servers which implement file transfer protocols are vulnerable to a denial of service attack from clients which complete the key exchange slowly, or not at all, causing pending content to be read into memory, but never transmitted.\n\n</details>\n\n## [GHSA-hcg3-q754-cr77](https://osv.dev/vulnerability/GHSA-hcg3-q754-cr77)\n\n<details>\n<summary>Details</summary>\n\n> SSH servers which implement file transfer protocols are vulnerable to a denial of service attack from clients which complete the key exchange slowly, or not at all, causing pending content to be read into memory, but never transmitted.\n\n</details>\n\n---\n\n### Affected Packages\n\n| Source | Package Name | Package Version |\n| --- | --- | --- |\n| lockfile:/code/sample/go.mod | golang.org/x/crypto | 0.24.0 |\n\n## Remediation\n\nTo fix these vulnerabilities, update the vulnerabilities past the listed fixed versions below.\n\n### Fixed Versions\n\n| Vulnerability ID | Package Name | Fixed Version |\n| --- | --- | --- |\n| GHSA-hcg3-q754-cr77 | golang.org/x/crypto | 0.35.0 |\n| GO-2025-3487 | golang.org/x/crypto | 0.35.0 |\n\nIf you believe these vulnerabilities do not affect your code and wish to ignore them, add them to the ignore list in an\n`osv-scanner.toml` file located in the same directory as the lockfile containing the vulnerable dependency.\n\nSee the format and more options in our documentation here: https://google.github.io/osv-scanner/configuration/\n\nAdd or append these values to the following config files to ignore this vulnerability:\n\n`/code/sample/osv-scanner.toml`\n\n```\n[[IgnoredVulns]]\nid = \"CVE-2025-22869\"\nreason = \"Your reason for ignoring this vulnerability\"\n```\n"
                },
                "properties": {
                  "security-severity": "7.5"
                }
              },
              {
                "id": "CVE-2025-22870",
                "name": "CVE-2025-22870",
                "shortDescription": {
                  "text": "CVE-2025-22870: HTTP Proxy bypass using IPv6 Zone IDs in golang.org/x/net"
                },
                "fullDescription": {
                  "text": "Matching of hosts against proxy patterns can improperly treat an IPv6 zone ID as a hostname component. For example, when the NO_PROXY environment variable is set to \"*.example.com\", a request to \"[::1%25.example.com]:80` will incorrectly match and not be proxied.",
                  "markdown": "Matching of hosts against proxy patterns can improperly treat an IPv6 zone ID as a hostname component. For example, when the NO_PROXY environment variable is set to \"*.example.com\", a request to \"[::1%25.example.com]:80` will incorrectly match and not be proxied."
                },
                "deprecatedIds": [
                  "CVE-2025-22870",
                  "GO-2025-3503",
                  "GHSA-qxp5-gwg8-xv66"
                ],
                "help": {
                  "text": "**Your dependency is vulnerable to [CVE-2025-22870](https://osv.dev/list?q=CVE-2025-22870)**\n(Also published as: [GO-2025-3503](https://osv.dev/vulnerability/GO-2025-3503), [GHSA-qxp5-gwg8-xv66](https://osv.dev/vulnerability/GHSA-qxp5-gwg8-xv66), ).\n\n## [GO-2025-3503](https://osv.dev/vulnerability/GO-2025-3503)\n\n<details>\n<summary>Details</summary>\n\n> Matching of hosts against proxy patterns can improperly treat an IPv6 zone ID as a hostname component. For example, when the NO_PROXY environment variable is set to \"*.example.com\", a request to \"[::1%25.example.com]:80` will incorrectly match and not be proxied.\n\n</details>\n\n## [GHSA-qxp5-gwg8-xv66](https://osv.dev/vulnerability/GHSA-qxp5-gwg8-xv66)\n\n<details>\n<summary>Details</summary>\n\n> Matching of hosts against proxy patterns can improperly treat an IPv6 zone ID as a hostname component. For example, when the NO_PROXY environment variable is set to \"*.example.com\", a request to \"[::1%25.example.com]:80` will incorrectly match and not be proxied.\n\n</details>\n\n---\n\n### Affected Packages\n\n| Source | Package Name | Package Version |\n| --- | --- | --- |\n| lockfile:/code/sample/go.mod | golang.org/x/net | 0.26.0 |\n\n## Remediation\n\nTo fix these vulnerabilities, update the vulnerabilities past the listed fixed versions below.\n\n### Fixed Versions\n\n| Vulnerability ID | Package Name | Fixed Version |\n| --- | --- | --- |\n| GHSA-qxp5-gwg8-xv66 | golang.org/x/net | 0.36.0 |\n| GO-2025-3503 | golang.org/x/net | 0.36.0 |\n\nIf you believe these vulnerabilities do not affect your code and wish to ignore them, add them to the ignore list in an\n`osv-scanner.toml` file located in the same directory as the lockfile containing the vulnerable dependency.\n\nSee the format and more options in our documentation here: https://google.github.io/osv-scanner/configuration/\n\nAdd or append these values to the following config files to ignore this vulnerability:\n\n`/code/sample/osv-scanner.toml`\n\n```\n[[IgnoredVulns]]\nid = \"CVE-2025-22870\"\nreason = \"Your reason for ignoring this vulnerability\"\n```\n",
                  "markdown": "**Your dependency is vulnerable to [CVE-2025-22870](https://osv.dev/list?q=CVE-2025-22870)**\n(Also published as: [GO-2025-3503](https://osv.dev/vulnerability/GO-2025-3503), [GHSA-qxp5-gwg8-xv66](https://osv.dev/vulnerability/GHSA-qxp5-gwg8-xv66), ).\n\n## [GO-2025-3503](https://osv.dev/vulnerability/GO-2025-3503)\n\n<details>\n<summary>Details</summary>\n\n> Matching of hosts against proxy patterns can improperly treat an IPv6 zone ID as a hostname component. For example, when the NO_PROXY environment variable is set to \"*.example.com\", a request to \"[::1%25.example.com]:80` will incorrectly match and not be proxied.\n\n</details>\n\n## [GHSA-qxp5-gwg8-xv66](https://osv.dev/vulnerability/GHSA-qxp5-gwg8-xv66)\n\n<details>\n<summary>Details</summary>\n\n> Matching of hosts against proxy patterns can improperly treat an IPv6 zone ID as a hostname component. For example, when the NO_PROXY environment variable is set to \"*.example.com\", a request to \"[::1%25.example.com]:80` will incorrectly match and not be proxied.\n\n</details>\n\n---\n\n### Affected Packages\n\n| Source | Package Name | Package Version |\n| --- | --- | --- |\n| lockfile:/code/sample/go.mod | golang.org/x/net | 0.26.0 |\n\n## Remediation\n\nTo fix these vulnerabilities, update the vulnerabilities past the listed fixed versions below.\n\n### Fixed Versions\n\n| Vulnerability ID | Package Name | Fixed Version |\n| --- | --- | --- |\n| GHSA-qxp5-gwg8-xv66 | golang.org/x/net | 0.36.0 |\n| GO-2025-3503 | golang.org/x/net | 0.36.0 |\n\nIf you believe these vulnerabilities do not affect your code and wish to ignore them, add them to the ignore list in an\n`osv-scanner.toml` file located in the same directory as the lockfile containing the vulnerable dependency.\n\nSee the format and more options in our documentation here: https://google.github.io/osv-scanner/configuration/\n\nAdd or append these values to the following config files to ignore this vulnerability:\n\n`/code/sample/osv-scanner.toml`\n\n```\n[[IgnoredVulns]]\nid = \"CVE-2025-22870\"\nreason = \"Your reason for ignoring this vulnerability\"\n```\n"
                },
                "properties": {
                  "security-severity": "4.4"
                }
              },
              {
                "id": "CVE-2024-45337",
                "name": "CVE-2024-45337",
                "shortDescription": {
                  "text": "CVE-2024-45337: Misuse of connection.serverAuthenticate may cause authorization bypass in golang.org/x/crypto"
                },
                "fullDescription": {
                  "text": "Applications and libraries which misuse connection.serverAuthenticate (via callback field ServerConfig.PublicKeyCallback) may be susceptible to an authorization bypass.\n\nThe documentation for ServerConfig.PublicKeyCallback says that \"A call to this function does not guarantee that the key offered is in fact used to authenticate.\" Specifically, the SSH protocol allows clients to inquire about whether a public key is acceptable before proving control of the corresponding private key. PublicKeyCallback may be called with multiple keys, and the order in which the keys were provided cannot be used to infer which key the client successfully authenticated with, if any. Some applications, which store the key(s) passed to PublicKeyCallback (or derived information) and make security relevant determinations based on it once the connection is established, may make incorrect assumptions.\n\nFor example, an attacker may send public keys A and B, and then authenticate with A. PublicKeyCallback would be called only twice, first with A and then with B. A vulnerable application may then make authorization decisions based on key B for which the attacker does not actually control the private key.\n\nSince this API is widely misused, as a partial mitigation golang.org/x/cry...@v0.31.0 enforces the property that, when successfully authenticating via public key, the last key passed to ServerConfig.PublicKeyCallback will be the key used to authenticate the connection. PublicKeyCallback will now be called multiple times with the same key, if necessary. Note that the client may still not control the last key passed to PublicKeyCallback if the connection is then authenticated with a different method, such as PasswordCallback, KeyboardInteractiveCallback, or NoClientAuth.\n\nUsers should be using the Extensions field of the Permissions return value from the various authentication callbacks to record data associated with the authentication attempt instead of referencing external state. Once the connection is established the state corresponding to the successful authentication attempt can be retrieved via the ServerConn.Permissions field. Note that some third-party libraries misuse the Permissions type by sharing it across authentication attempts; users of third-party libraries should refer to the relevant projects for guidance.",
                  "markdown": "Applications and libraries which misuse connection.serverAuthenticate (via callback field ServerConfig.PublicKeyCallback) may be susceptible to an authorization bypass.\n\nThe documentation for ServerConfig.PublicKeyCallback says that \"A call to this function does not guarantee that the key offered is in fact used to authenticate.\" Specifically, the SSH protocol allows clients to inquire about whether a public key is acceptable before proving control of the corresponding private key. PublicKeyCallback may be called with multiple keys, and the order in which the keys were provided cannot be used to infer which key the client successfully authenticated with, if any. Some applications, which store the key(s) passed to PublicKeyCallback (or derived information) and make security relevant determinations based on it once the connection is established, may make incorrect assumptions.\n\nFor example, an attacker may send public keys A and B, and then authenticate with A. PublicKeyCallback would be called only twice, first with A and then with B. A vulnerable application may then make authorization decisions based on key B for which the attacker does not actually control the private key.\n\nSince this API is widely misused, as a partial mitigation golang.org/x/cry...@v0.31.0 enforces the property that, when successfully authenticating via public key, the last key passed to ServerConfig.PublicKeyCallback will be the key used to authenticate the connection. PublicKeyCallback will now be called multiple times with the same key, if necessary. Note that the client may still not control the last key passed to PublicKeyCallback if the connection is then authenticated with a different method, such as PasswordCallback, KeyboardInteractiveCallback, or NoClientAuth.\n\nUsers should be using the Extensions field of the Permissions return value from the various authentication callbacks to record data associated with the authentication attempt instead of referencing external state. Once the connection is established the state corresponding to the successful authentication attempt can be retrieved via the ServerConn.Permissions field. Note that some third-party libraries misuse the Permissions type by sharing it across authentication attempts; users of third-party libraries should refer to the relevant projects for guidance."
                },
                "deprecatedIds": [
                  "CVE-2024-45337",
                  "GO-2024-3321",
                  "GHSA-v778-237x-gjrc"
                ],
                "help": {
                  "text": "**Your dependency is vulnerable to [CVE-2024-45337](https://osv.dev/list?q=CVE-2024-45337)**\n(Also published as: [GO-2024-3321](https://osv.dev/vulnerability/GO-2024-3321), [GHSA-v778-237x-gjrc](https://osv.dev/vulnerability/GHSA-v778-237x-gjrc), ).\n\n## [GO-2024-3321](https://osv.dev/vulnerability/GO-2024-3321)\n\n<details>\n<summary>Details</summary>\n\n> Applications and libraries which misuse connection.serverAuthenticate (via callback field ServerConfig.PublicKeyCallback) may be susceptible to an authorization bypass.\n> \n> The documentation for ServerConfig.PublicKeyCallback says that \"A call to this function does not guarantee that the key offered is in fact used to authenticate.\" Specifically, the SSH protocol allows clients to inquire about whether a public key is acceptable before proving control of the corresponding private key. PublicKeyCallback may be called with multiple keys, and the order in which the keys were provided cannot be used to infer which key the client successfully authenticated with, if any. Some applications, which store the key(s) passed to PublicKeyCallback (or derived information) and make security relevant determinations based on it once the connection is established, may make incorrect assumptions.\n> \n> For example, an attacker may send public keys A and B, and then authenticate with A. PublicKeyCallback would be called only twice, first with A and then with B. A vulnerable application may then make authorization decisions based on key B for which the attacker does not actually control the private key.\n> \n> Since this API is widely misused, as a partial mitigation golang.org/x/cry...@v0.31.0 enforces the property that, when successfully authenticating via public key, the last key passed to ServerConfig.PublicKeyCallback will be the key used to authenticate the connection. PublicKeyCallback will now be called multiple times with the same key, if necessary. Note that the client may still not control the last key passed to PublicKeyCallback if the connection is then authenticated with a different method, such as PasswordCallback, KeyboardInteractiveCallback, or NoClientAuth.\n> \n> Users should be using the Extensions field of the Permissions return value from the various authentication callbacks to record data associated with the authentication attempt instead of referencing external state. Once the connection is established the state corresponding to the successful authentication attempt can be retrieved via the ServerConn.Permissions field. Note that some third-party libraries misuse the Permissions type by sharing it across authentication attempts; users of third-party libraries should refer to the relevant projects for guidance.\n\n</details>\n\n## [GHSA-v778-237x-gjrc](https://osv.dev/vulnerability/GHSA-v778-237x-gjrc)\n\n<details>\n<summary>Details</summary>\n\n> Applications and libraries which misuse the ServerConfig.PublicKeyCallback callback may be susceptible to an authorization bypass.\n> \n> The documentation for ServerConfig.PublicKeyCallback says that \"A call to this function does not guarantee that the key offered is in fact used to authenticate.\" Specifically, the SSH protocol allows clients to inquire about whether a public key is acceptable before proving control of the corresponding private key. PublicKeyCallback may be called with multiple keys, and the order in which the keys were provided cannot be used to infer which key the client successfully authenticated with, if any. Some applications, which store the key(s) passed to PublicKeyCallback (or derived information) and make security relevant determinations based on it once the connection is established, may make incorrect assumptions.\n> \n> For example, an attacker may send public keys A and B, and then authenticate with A. PublicKeyCallback would be called only twice, first with A and then with B. A vulnerable application may then make authorization decisions based on key B for which the attacker does not actually control the private key.\n> \n> Since this API is widely misused, as a partial mitigation golang.org/x/crypto@v0.31.0 enforces the property that, when successfully authenticating via public key, the last key passed to ServerConfig.PublicKeyCallback will be the key used to authenticate the connection. PublicKeyCallback will now be called multiple times with the same key, if necessary. Note that the client may still not control the last key passed to PublicKeyCallback if the connection is then authenticated with a different method, such as PasswordCallback, KeyboardInteractiveCallback, or NoClientAuth.\n> \n> Users should be using the Extensions field of the Permissions return value from the various authentication callbacks to record data associated with the authentication attempt instead of referencing external state. Once the connection is established the state corresponding to the successful authentication attempt can be retrieved via the ServerConn.Permissions field. Note that some third-party libraries misuse the Permissions type by sharing it across authentication attempts; users of third-party libraries should refer to the relevant projects for guidance.\n\n</details>\n\n---\n\n### Affected Packages\n\n| Source | Package Name | Package Version |\n| --- | --- | --- |\n| lockfile:/code/sample/go.mod | golang.org/x/crypto | 0.24.0 |\n\n## Remediation\n\nTo fix these vulnerabilities, update the vulnerabilities past the listed fixed versions below.\n\n### Fixed Versions\n\n| Vulnerability ID | Package Name | Fixed Version |\n| --- | --- | --- |\n| GHSA-v778-237x-gjrc | golang.org/x/crypto | 0.31.0 |\n| GO-2024-3321 | golang.org/x/crypto | 0.31.0 |\n\nIf you believe these vulnerabilities do not affect your code and wish to ignore them, add them to the ignore list in an\n`osv-scanner.toml` file located in the same directory as the lockfile containing the vulnerable dependency.\n\nSee the format and more options in our documentation here: https://google.github.io/osv-scanner/configuration/\n\nAdd or append these values to the following config files to ignore this vulnerability:\n\n`/code/sample/osv-scanner.toml`\n\n```\n[[IgnoredVulns]]\nid = \"CVE-2024-45337\"\nreason = \"Your reason for ignoring this vulnerability\"\n```\n",
                  "markdown": "**Your dependency is vulnerable to [CVE-2024-45337](https://osv.dev/list?q=CVE-2024-45337)**\n(Also published as: [GO-2024-3321](https://osv.dev/vulnerability/GO-2024-3321), [GHSA-v778-237x-gjrc](https://osv.dev/vulnerability/GHSA-v778-237x-gjrc), ).\n\n## [GO-2024-3321](https://osv.dev/vulnerability/GO-2024-3321)\n\n<details>\n<summary>Details</summary>\n\n> Applications and libraries which misuse connection.serverAuthenticate (via callback field ServerConfig.PublicKeyCallback) may be susceptible to an authorization bypass.\n> \n> The documentation for ServerConfig.PublicKeyCallback says that \"A call to this function does not guarantee that the key offered is in fact used to authenticate.\" Specifically, the SSH protocol allows clients to inquire about whether a public key is acceptable before proving control of the corresponding private key. PublicKeyCallback may be called with multiple keys, and the order in which the keys were provided cannot be used to infer which key the client successfully authenticated with, if any. Some applications, which store the key(s) passed to PublicKeyCallback (or derived information) and make security relevant determinations based on it once the connection is established, may make incorrect assumptions.\n> \n> For example, an attacker may send public keys A and B, and then authenticate with A. PublicKeyCallback would be called only twice, first with A and then with B. A vulnerable application may then make authorization decisions based on key B for which the attacker does not actually control the private key.\n> \n> Since this API is widely misused, as a partial mitigation golang.org/x/cry...@v0.31.0 enforces the property that, when successfully authenticating via public key, the last key passed to ServerConfig.PublicKeyCallback will be the key used to authenticate the connection. PublicKeyCallback will now be called multiple times with the same key, if necessary. Note that the client may still not control the last key passed to PublicKeyCallback if the connection is then authenticated with a different method, such as PasswordCallback, KeyboardInteractiveCallback, or NoClientAuth.\n> \n> Users should be using the Extensions field of the Permissions return value from the various authentication callbacks to record data associated with the authentication attempt instead of referencing external state. Once the connection is established the state corresponding to the successful authentication attempt can be retrieved via the ServerConn.Permissions field. Note that some third-party libraries misuse the Permissions type by sharing it across authentication attempts; users of third-party libraries should refer to the relevant projects for guidance.\n\n</details>\n\n## [GHSA-v778-237x-gjrc](https://osv.dev/vulnerability/GHSA-v778-237x-gjrc)\n\n<details>\n<summary>Details</summary>\n\n> Applications and libraries which misuse the ServerConfig.PublicKeyCallback callback may be susceptible to an authorization bypass.\n> \n> The documentation for ServerConfig.PublicKeyCallback says that \"A call to this function does not guarantee that the key offered is in fact used to authenticate.\" Specifically, the SSH protocol allows clients to inquire about whether a public key is acceptable before proving control of the corresponding private key. PublicKeyCallback may be called with multiple keys, and the order in which the keys were provided cannot be used to infer which key the client successfully authenticated with, if any. Some applications, which store the key(s) passed to PublicKeyCallback (or derived information) and make security relevant determinations based on it once the connection is established, may make incorrect assumptions.\n> \n> For example, an attacker may send public keys A and B, and then authenticate with A. PublicKeyCallback would be called only twice, first with A and then with B. A vulnerable application may then make authorization decisions based on key B for which the attacker does not actually control the private key.\n> \n> Since this API is widely misused, as a partial mitigation golang.org/x/crypto@v0.31.0 enforces the property that, when successfully authenticating via public key, the last key passed to ServerConfig.PublicKeyCallback will be the key used to authenticate the connection. PublicKeyCallback will now be called multiple times with the same key, if necessary. Note that the client may still not control the last key passed to PublicKeyCallback if the connection is then authenticated with a different method, such as PasswordCallback, KeyboardInteractiveCallback, or NoClientAuth.\n> \n> Users should be using the Extensions field of the Permissions return value from the various authentication callbacks to record data associated with the authentication attempt instead of referencing external state. Once the connection is established the state corresponding to the successful authentication attempt can be retrieved via the ServerConn.Permissions field. Note that some third-party libraries misuse the Permissions type by sharing it across authentication attempts; users of third-party libraries should refer to the relevant projects for guidance.\n\n</details>\n\n---\n\n### Affected Packages\n\n| Source | Package Name | Package Version |\n| --- | --- | --- |\n| lockfile:/code/sample/go.mod | golang.org/x/crypto | 0.24.0 |\n\n## Remediation\n\nTo fix these vulnerabilities, update the vulnerabilities past the listed fixed versions below.\n\n### Fixed Versions\n\n| Vulnerability ID | Package Name | Fixed Version |\n| --- | --- | --- |\n| GHSA-v778-237x-gjrc | golang.org/x/crypto | 0.31.0 |\n| GO-2024-3321 | golang.org/x/crypto | 0.31.0 |\n\nIf you believe these vulnerabilities do not affect your code and wish to ignore them, add them to the ignore list in an\n`osv-scanner.toml` file located in the same directory as the lockfile containing the vulnerable dependency.\n\nSee the format and more options in our documentation here: https://google.github.io/osv-scanner/configuration/\n\nAdd or append these values to the following config files to ignore this vulnerability:\n\n`/code/sample/osv-scanner.toml`\n\n```\n[[IgnoredVulns]]\nid = \"CVE-2024-45337\"\nreason = \"Your reason for ignoring this vulnerability\"\n```\n"
                },
                "properties": {
                  "security-severity": "9.1"
                }
              },
              {
                "id": "CVE-2024-45338",
                "name": "CVE-2024-45338",
                "shortDescription": {
                  "text": "CVE-2024-45338: Non-linear parsing of case-insensitive content in golang.org/x/net/html"
                },
                "fullDescription": {
                  "text": "An attacker can craft an input to the Parse functions that would be processed non-linearly with respect to its length, resulting in extremely slow parsing. This could cause a denial of service.",
                  "markdown": "An attacker can craft an input to the Parse functions that would be processed non-linearly with respect to its length, resulting in extremely slow parsing. This could cause a denial of service."
                },
                "deprecatedIds": [
                  "CVE-2024-45338",
                  "GO-2024-3333",
                  "GHSA-w32m-9786-jp63"
                ],
                "help": {
                  "text": "**Your dependency is vulnerable to [CVE-2024-45338](https://osv.dev/list?q=CVE-2024-45338)**.\n\n## [GO-2024-3333](https://osv.dev/vulnerability/GO-2024-3333)\n\n<details>\n<summary>Details</summary>\n\n> An attacker can craft an input to the Parse functions that would be processed non-linearly with respect to its length, resulting in extremely slow parsing. This could cause a denial of service.\n\n</details>\n\n---\n\n### Affected Packages\n\n| Source | Package Name | Package Version |\n| --- | --- | --- |\n| lockfile:/code/sample/go.mod | golang.org/x/net | 0.26.0 |\n\n## Remediation\n\nTo fix these vulnerabilities, update the vulnerabilities past the listed fixed versions below.\n\n### Fixed Versions\n\n| Vulnerability ID | Package Name | Fixed Version |\n| --- | --- | --- |\n| GO-2024-3333 | golang.org/x/net | 0.33.0 |\n\nIf you believe these vulnerabilities do not affect your code and wish to ignore them, add them to the ignore list in an\n`osv-scanner.toml` file located in the same directory as the lockfile containing the vulnerable dependency.\n\nSee the format and more options in our documentation here: https://google.github.io/osv-scanner/configuration/\n\nAdd or append these values to the following config files to ignore this vulnerability:\n\n`/code/sample/osv-scanner.toml`\n\n```\n[[IgnoredVulns]]\nid = \"CVE-2024-45338\"\nreason = \"Your reason for ignoring this vulnerability\"\n```\n",
                  "markdown": "**Your dependency is vulnerable to [CVE-2024-45338](https://osv.dev/list?q=CVE-2024-45338)**.\n\n## [GO-2024-3333](https://osv.dev/vulnerability/GO-2024-3333)\n\n<details>\n<summary>Details</summary>\n\n> An attacker can craft an input to the Parse functions that would be processed non-linearly with respect to its length, resulting in extremely slow parsing. This could cause a denial of service.\n\n</details>\n\n---\n\n### Affected Packages\n\n| Source | Package Name | Package Version |\n| --- | --- | --- |\n| lockfile:/code/sample/go.mod | golang.org/x/net | 0.26.0 |\n\n## Remediation\n\nTo fix these vulnerabilities, update the vulnerabilities past the listed fixed versions below.\n\n### Fixed Versions\n\n| Vulnerability ID | Package Name | Fixed Version |\n| --- | --- | --- |\n| GO-2024-3333 | golang.org/x/net | 0.33.0 |\n\nIf you believe these vulnerabilities do not affect your code and wish to ignore them, add them to the ignore list in an\n`osv-scanner.toml` file located in the same directory as the lockfile containing the vulnerable dependency.\n\nSee the format and more options in our documentation here: https://google.github.io/osv-scanner/configuration/\n\nAdd or append these values to the following config files to ignore this vulnerability:\n\n`/code/sample/osv-scanner.toml`\n\n```\n[[IgnoredVulns]]\nid = \"CVE-2024-45338\"\nreason = \"Your reason for ignoring this vulnerability\"\n```\n"
                }
              },
              {
                "id": "CVE-2024-45341",
                "name": "CVE-2024-45341",
                "shortDescription": {
                  "text": "CVE-2024-45341: Usage of IPv6 zone IDs can bypass URI name constraints in crypto/x509"
                },
                "fullDescription": {
                  "text": "A certificate with a URI which has a IPv6 address with a zone ID may incorrectly satisfy a URI name constraint that applies to the certificate chain.\n\nCertificates containing URIs are not permitted in the web PKI, so this only affects users of private PKIs which make use of URIs.",
                  "markdown": "A certificate with a URI which has a IPv6 address with a zone ID may incorrectly satisfy a URI name constraint that applies to the certificate chain.\n\nCertificates containing URIs are not permitted in the web PKI, so this only affects users of private PKIs which make use of URIs."
                },
                "deprecatedIds": [
                  "CVE-2024-45341",
                  "BIT-golang-2024-45341",
                  "GO-2025-3373"
                ],
                "help": {
                  "text": "**Your dependency is vulnerable to [CVE-2024-45341](https://osv.dev/list?q=CVE-2024-45341)**.\n\n## [GO-2025-3373](https://osv.dev/vulnerability/GO-2025-3373)\n\n<details>\n<summary>Details</summary>\n\n> A certificate with a URI which has a IPv6 address with a zone ID may incorrectly satisfy a URI name constraint that applies to the certificate chain.\n> \n> Certificates containing URIs are not permitted in the web PKI, so this only affects users of private PKIs which make use of URIs.\n\n</details>\n\n---\n\n### Affected Packages\n\n| Source | Package Name | Package Version |\n| --- | --- | --- |\n| lockfile:/code/sample/go.mod | stdlib | 1.23.3 |\n\n## Remediation\n\nTo fix these vulnerabilities, update the vulnerabilities past the listed fixed versions below.\n\n### Fixed Versions\n\n| Vulnerability ID | Package Name | Fixed Version |\n| --- | --- | --- |\n| GO-2025-3373 | stdlib | 1.22.11, 1.23.5, 1.24.0-rc.2 |\n\nIf you believe these vulnerabilities do not affect your code and wish to ignore them, add them to the ignore list in an\n`osv-scanner.toml` file located in the same directory as the lockfile containing the vulnerable dependency.\n\nSee the format and more options in our documentation here: https://google.github.io/osv-scanner/configuration/\n\nAdd or append these values to the following config files to ignore this vulnerability:\n\n`/code/sample/osv-scanner.toml`\n\n```\n[[IgnoredVulns]]\nid = \"CVE-2024-45341\"\nreason = \"Your reason for ignoring this vulnerability\"\n```\n",
                  "markdown": "**Your dependency is vulnerable to [CVE-2024-45341](https://osv.dev/list?q=CVE-2024-45341)**.\n\n## [GO-2025-3373](https://osv.dev/vulnerability/GO-2025-3373)\n\n<details>\n<summary>Details</summary>\n\n> A certificate with a URI which has a IPv6 address with a zone ID may incorrectly satisfy a URI name constraint that applies to the certificate chain.\n> \n> Certificates containing URIs are not permitted in the web PKI, so this only affects users of private PKIs which make use of URIs.\n\n</details>\n\n---\n\n### Affected Packages\n\n| Source | Package Name | Package Version |\n| --- | --- | --- |\n| lockfile:/code/sample/go.mod | stdlib | 1.23.3 |\n\n## Remediation\n\nTo fix these vulnerabilities, update the vulnerabilities past the listed fixed versions below.\n\n### Fixed Versions\n\n| Vulnerability ID | Package Name | Fixed Version |\n| --- | --- | --- |\n| GO-2025-3373 | stdlib | 1.22.11, 1.23.5, 1.24.0-rc.2 |\n\nIf you believe these vulnerabilities do not affect your code and wish to ignore them, add them to the ignore list in an\n`osv-scanner.toml` file located in the same directory as the lockfile containing the vulnerable dependency.\n\nSee the format and more options in our documentation here: https://google.github.io/osv-scanner/configuration/\n\nAdd or append these values to the following config files to ignore this vulnerability:\n\n`/code/sample/osv-scanner.toml`\n\n```\n[[IgnoredVulns]]\nid = \"CVE-2024-45341\"\nreason = \"Your reason for ignoring this vulnerability\"\n```\n"
                }
              },
              {
                "id": "CVE-2024-45336",
                "name": "CVE-2024-45336",
                "shortDescription": {
                  "text": "CVE-2024-45336: Sensitive headers incorrectly sent after cross-domain redirect in net/http"
                },
                "fullDescription": {
                  "text": "The HTTP client drops sensitive headers after following a cross-domain redirect. For example, a request to a.com/ containing an Authorization header which is redirected to b.com/ will not send that header to b.com.\n\nIn the event that the client received a subsequent same-domain redirect, however, the sensitive headers would be restored. For example, a chain of redirects from a.com/, to b.com/1, and finally to b.com/2 would incorrectly send the Authorization header to b.com/2.",
                  "markdown": "The HTTP client drops sensitive headers after following a cross-domain redirect. For example, a request to a.com/ containing an Authorization header which is redirected to b.com/ will not send that header to b.com.\n\nIn the event that the client received a subsequent same-domain redirect, however, the sensitive headers would be restored. For example, a chain of redirects from a.com/, to b.com/1, and finally to b.com/2 would incorrectly send the Authorization header to b.com/2."
                },
                "deprecatedIds": [
                  "CVE-2024-45336",
                  "BIT-golang-2024-45336",
                  "GO-2025-3420"
                ],
                "help": {
                  "text": "**Your dependency is vulnerable to [CVE-2024-45336](https://osv.dev/list?q=CVE-2024-45336)**.\n\n## [GO-2025-3420](https://osv.dev/vulnerability/GO-2025-3420)\n\n<details>\n<summary>Details</summary>\n\n> The HTTP client drops sensitive headers after following a cross-domain redirect. For example, a request to a.com/ containing an Authorization header which is redirected to b.com/ will not send that header to b.com.\n> \n> In the event that the client received a subsequent same-domain redirect, however, the sensitive headers would be restored. For example, a chain of redirects from a.com/, to b.com/1, and finally to b.com/2 would incorrectly send the Authorization header to b.com/2.\n\n</details>\n\n---\n\n### Affected Packages\n\n| Source | Package Name | Package Version |\n| --- | --- | --- |\n| lockfile:/code/sample/go.mod | stdlib | 1.23.3 |\n\n## Remediation\n\nTo fix these vulnerabilities, update the vulnerabilities past the listed fixed versions below.\n\n### Fixed Versions\n\n| Vulnerability ID | Package Name | Fixed Version |\n| --- | --- | --- |\n| GO-2025-3420 | stdlib | 1.22.11, 1.23.5, 1.24.0-rc.2 |\n\nIf you believe these vulnerabilities do not affect your code and wish to ignore them, add them to the ignore list in an\n`osv-scanner.toml` file located in the same directory as the lockfile containing the vulnerable dependency.\n\nSee the format and more options in our documentation here: https://google.github.io/osv-scanner/configuration/\n\nAdd or append these values to the following config files to ignore this vulnerability:\n\n`/code/sample/osv-scanner.toml`\n\n```\n[[IgnoredVulns]]\nid = \"CVE-2024-45336\"\nreason = \"Your reason for ignoring this vulnerability\"\n```\n",
                  "markdown": "**Your dependency is vulnerable to [CVE-2024-45336](https://osv.dev/list?q=CVE-2024-45336)**.\n\n## [GO-2025-3420](https://osv.dev/vulnerability/GO-2025-3420)\n\n<details>\n<summary>Details</summary>\n\n> The HTTP client drops sensitive headers after following a cross-domain redirect. For example, a request to a.com/ containing an Authorization header which is redirected to b.com/ will not send that header to b.com.\n> \n> In the event that the client received a subsequent same-domain redirect, however, the sensitive headers would be restored. For example, a chain of redirects from a.com/, to b.com/1, and finally to b.com/2 would incorrectly send the Authorization header to b.com/2.\n\n</details>\n\n---\n\n### Affected Packages\n\n| Source | Package Name | Package Version |\n| --- | --- | --- |\n| lockfile:/code/sample/go.mod | stdlib | 1.23.3 |\n\n## Remediation\n\nTo fix these vulnerabilities, update the vulnerabilities past the listed fixed versions below.\n\n### Fixed Versions\n\n| Vulnerability ID | Package Name | Fixed Version |\n| --- | --- | --- |\n| GO-2025-3420 | stdlib | 1.22.11, 1.23.5, 1.24.0-rc.2 |\n\nIf you believe these vulnerabilities do not affect your code and wish to ignore them, add them to the ignore list in an\n`osv-scanner.toml` file located in the same directory as the lockfile containing the vulnerable dependency.\n\nSee the format and more options in our documentation here: https://google.github.io/osv-scanner/configuration/\n\nAdd or append these values to the following config files to ignore this vulnerability:\n\n`/code/sample/osv-scanner.toml`\n\n```\n[[IgnoredVulns]]\nid = \"CVE-2024-45336\"\nreason = \"Your reason for ignoring this vulnerability\"\n```\n"
                }
              },
              {
                "id": "CVE-2025-22866",
                "name": "CVE-2025-22866",
                "shortDescription": {
                  "text": "CVE-2025-22866: Timing sidechannel for P-256 on ppc64le in crypto/internal/nistec"
                },
                "fullDescription": {
                  "text": "Due to the usage of a variable time instruction in the assembly implementation of an internal function, a small number of bits of secret scalars are leaked on the ppc64le architecture. Due to the way this function is used, we do not believe this leakage is enough to allow recovery of the private key when P-256 is used in any well known protocols.",
                  "markdown": "Due to the usage of a variable time instruction in the assembly implementation of an internal function, a small number of bits of secret scalars are leaked on the ppc64le architecture. Due to the way this function is used, we do not believe this leakage is enough to allow recovery of the private key when P-256 is used in any well known protocols."
                },
                "deprecatedIds": [
                  "CVE-2025-22866",
                  "BIT-golang-2025-22866",
                  "GO-2025-3447"
                ],
                "help": {
                  "text": "**Your dependency is vulnerable to [CVE-2025-22866](https://osv.dev/list?q=CVE-2025-22866)**.\n\n## [GO-2025-3447](https://osv.dev/vulnerability/GO-2025-3447)\n\n<details>\n<summary>Details</summary>\n\n> Due to the usage of a variable time instruction in the assembly implementation of an internal function, a small number of bits of secret scalars are leaked on the ppc64le architecture. Due to the way this function is used, we do not believe this leakage is enough to allow recovery of the private key when P-256 is used in any well known protocols.\n\n</details>\n\n---\n\n### Affected Packages\n\n| Source | Package Name | Package Version |\n| --- | --- | --- |\n| lockfile:/code/sample/go.mod | stdlib | 1.23.3 |\n\n## Remediation\n\nTo fix these vulnerabilities, update the vulnerabilities past the listed fixed versions below.\n\n### Fixed Versions\n\n| Vulnerability ID | Package Name | Fixed Version |\n| --- | --- | --- |\n| GO-2025-3447 | stdlib | 1.22.12, 1.23.6, 1.24.0-rc.3 |\n\nIf you believe these vulnerabilities do not affect your code and wish to ignore them, add them to the ignore list in an\n`osv-scanner.toml` file located in the same directory as the lockfile containing the vulnerable dependency.\n\nSee the format and more options in our documentation here: https://google.github.io/osv-scanner/configuration/\n\nAdd or append these values to the following config files to ignore this vulnerability:\n\n`/code/sample/osv-scanner.toml`\n\n```\n[[IgnoredVulns]]\nid = \"CVE-2025-22866\"\nreason = \"Your reason for ignoring this vulnerability\"\n```\n",
                  "markdown": "**Your dependency is vulnerable to [CVE-2025-22866](https://osv.dev/list?q=CVE-2025-22866)**.\n\n## [GO-2025-3447](https://osv.dev/vulnerability/GO-2025-3447)\n\n<details>\n<summary>Details</summary>\n\n> Due to the usage of a variable time instruction in the assembly implementation of an internal function, a small number of bits of secret scalars are leaked on the ppc64le architecture. Due to the way this function is used, we do not believe this leakage is enough to allow recovery of the private key when P-256 is used in any well known protocols.\n\n</details>\n\n---\n\n### Affected Packages\n\n| Source | Package Name | Package Version |\n| --- | --- | --- |\n| lockfile:/code/sample/go.mod | stdlib | 1.23.3 |\n\n## Remediation\n\nTo fix these vulnerabilities, update the vulnerabilities past the listed fixed versions below.\n\n### Fixed Versions\n\n| Vulnerability ID | Package Name | Fixed Version |\n| --- | --- | --- |\n| GO-2025-3447 | stdlib | 1.22.12, 1.23.6, 1.24.0-rc.3 |\n\nIf you believe these vulnerabilities do not affect your code and wish to ignore them, add them to the ignore list in an\n`osv-scanner.toml` file located in the same directory as the lockfile containing the vulnerable dependency.\n\nSee the format and more options in our documentation here: https://google.github.io/osv-scanner/configuration/\n\nAdd or append these values to the following config files to ignore this vulnerability:\n\n`/code/sample/osv-scanner.toml`\n\n```\n[[IgnoredVulns]]\nid = \"CVE-2025-22866\"\nreason = \"Your reason for ignoring this vulnerability\"\n```\n"
                }
              },
              {
                "id": "CVE-2025-22871",
                "name": "CVE-2025-22871",
                "shortDescription": {
                  "text": "CVE-2025-22871: Request smuggling due to acceptance of invalid chunked data in net/http"
                },
                "fullDescription": {
                  "text": "The net/http package improperly accepts a bare LF as a line terminator in chunked data chunk-size lines. This can permit request smuggling if a net/http server is used in conjunction with a server that incorrectly accepts a bare LF as part of a chunk-ext.",
                  "markdown": "The net/http package improperly accepts a bare LF as a line terminator in chunked data chunk-size lines. This can permit request smuggling if a net/http server is used in conjunction with a server that incorrectly accepts a bare LF as part of a chunk-ext."
                },
                "deprecatedIds": [
                  "CVE-2025-22871",
                  "BIT-golang-2025-22871",
                  "GO-2025-3563"
                ],
                "help": {
                  "text": "**Your dependency is vulnerable to [CVE-2025-22871](https://osv.dev/list?q=CVE-2025-22871)**.\n\n## [GO-2025-3563](https://osv.dev/vulnerability/GO-2025-3563)\n\n<details>\n<summary>Details</summary>\n\n> The net/http package improperly accepts a bare LF as a line terminator in chunked data chunk-size lines. This can permit request smuggling if a net/http server is used in conjunction with a server that incorrectly accepts a bare LF as part of a chunk-ext.\n\n</details>\n\n---\n\n### Affected Packages\n\n| Source | Package Name | Package Version |\n| --- | --- | --- |\n| lockfile:/code/sample/go.mod | stdlib | 1.23.3 |\n\n## Remediation\n\nTo fix these vulnerabilities, update the vulnerabilities past the listed fixed versions below.\n\n### Fixed Versions\n\n| Vulnerability ID | Package Name | Fixed Version |\n| --- | --- | --- |\n| GO-2025-3563 | stdlib | 1.23.8, 1.24.2 |\n\nIf you believe these vulnerabilities do not affect your code and wish to ignore them, add them to the ignore list in an\n`osv-scanner.toml` file located in the same directory as the lockfile containing the vulnerable dependency.\n\nSee the format and more options in our documentation here: https://google.github.io/osv-scanner/configuration/\n\nAdd or append these values to the following config files to ignore this vulnerability:\n\n`/code/sample/osv-scanner.toml`\n\n```\n[[IgnoredVulns]]\nid = \"CVE-2025-22871\"\nreason = \"Your reason for ignoring this vulnerability\"\n```\n",
                  "markdown": "**Your dependency is vulnerable to [CVE-2025-22871](https://osv.dev/list?q=CVE-2025-22871)**.\n\n## [GO-2025-3563](https://osv.dev/vulnerability/GO-2025-3563)\n\n<details>\n<summary>Details</summary>\n\n> The net/http package improperly accepts a bare LF as a line terminator in chunked data chunk-size lines. This can permit request smuggling if a net/http server is used in conjunction with a server that incorrectly accepts a bare LF as part of a chunk-ext.\n\n</details>\n\n---\n\n### Affected Packages\n\n| Source | Package Name | Package Version |\n| --- | --- | --- |\n| lockfile:/code/sample/go.mod | stdlib | 1.23.3 |\n\n## Remediation\n\nTo fix these vulnerabilities, update the vulnerabilities past the listed fixed versions below.\n\n### Fixed Versions\n\n| Vulnerability ID | Package Name | Fixed Version |\n| --- | --- | --- |\n| GO-2025-3563 | stdlib | 1.23.8, 1.24.2 |\n\nIf you believe these vulnerabilities do not affect your code and wish to ignore them, add them to the ignore list in an\n`osv-scanner.toml` file located in the same directory as the lockfile containing the vulnerable dependency.\n\nSee the format and more options in our documentation here: https://google.github.io/osv-scanner/configuration/\n\nAdd or append these values to the following config files to ignore this vulnerability:\n\n`/code/sample/osv-scanner.toml`\n\n```\n[[IgnoredVulns]]\nid = \"CVE-2025-22871\"\nreason = \"Your reason for ignoring this vulnerability\"\n```\n"
                }
              }
            ],
            "version": "2.0.0"
          }
        },
        "artifacts": [
          {
            "location": {
              "uri": "file:///code/sample/go.mod"
            },
            "length": -1
          }
        ],
        "results": [
          {
            "ruleId": "CVE-2025-22869",
            "ruleIndex": 0,
            "level": "warning",
            "message": {
              "text": "Package 'golang.org/x/crypto@0.24.0' is vulnerable to 'CVE-2025-22869' (also known as 'GO-2025-3487', 'GHSA-hcg3-q754-cr77')."
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "file:///code/sample/go.mod"
                  }
                }
              }
            ]
          },
          {
            "ruleId": "CVE-2025-22870",
            "ruleIndex": 1,
            "level": "warning",
            "message": {
              "text": "Package 'golang.org/x/net@0.26.0' is vulnerable to 'CVE-2025-22870' (also known as 'GO-2025-3503', 'GHSA-qxp5-gwg8-xv66')."
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "file:///code/sample/go.mod"
                  }
                }
              }
            ]
          },
          {
            "ruleId": "CVE-2024-45337",
            "ruleIndex": 2,
            "level": "warning",
            "message": {
              "text": "Package 'golang.org/x/crypto@0.24.0' is vulnerable to 'CVE-2024-45337' (also known as 'GO-2024-3321', 'GHSA-v778-237x-gjrc')."
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "file:///code/sample/go.mod"
                  }
                }
              }
            ]
          },
          {
            "ruleId": "CVE-2024-45337",
            "ruleIndex": 2,
            "level": "warning",
            "message": {
              "text": "Package 'golang.org/x/crypto@0.24.0' is vulnerable to 'CVE-2024-45337' (also known as 'GO-2024-3321', 'GHSA-v778-237x-gjrc')."
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "file:///code/sample/go.mod"
                  }
                }
              }
            ]
          },
          {
            "ruleId": "CVE-2024-45338",
            "ruleIndex": 3,
            "level": "warning",
            "message": {
              "text": "Package 'golang.org/x/net@0.26.0' is vulnerable to 'CVE-2024-45338' (also known as 'GO-2024-3333', 'GHSA-w32m-9786-jp63')."
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "file:///code/sample/go.mod"
                  }
                }
              }
            ]
          },
          {
            "ruleId": "CVE-2024-45341",
            "ruleIndex": 4,
            "level": "warning",
            "message": {
              "text": "Package 'stdlib@1.23.3' is vulnerable to 'CVE-2024-45341' (also known as 'BIT-golang-2024-45341', 'GO-2025-3373')."
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "file:///code/sample/go.mod"
                  }
                }
              }
            ]
          },
          {
            "ruleId": "CVE-2024-45336",
            "ruleIndex": 5,
            "level": "warning",
            "message": {
              "text": "Package 'stdlib@1.23.3' is vulnerable to 'CVE-2024-45336' (also known as 'BIT-golang-2024-45336', 'GO-2025-3420')."
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "file:///code/sample/go.mod"
                  }
                }
              }
            ]
          },
          {
            "ruleId": "CVE-2025-22866",
            "ruleIndex": 6,
            "level": "warning",
            "message": {
              "text": "Package 'stdlib@1.23.3' is vulnerable to 'CVE-2025-22866' (also known as 'BIT-golang-2025-22866', 'GO-2025-3447')."
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "file:///code/sample/go.mod"
                  }
                }
              }
            ]
          },
          {
            "ruleId": "CVE-2025-22869",
            "ruleIndex": 0,
            "level": "warning",
            "message": {
              "text": "Package 'golang.org/x/crypto@0.24.0' is vulnerable to 'CVE-2025-22869' (also known as 'GO-2025-3487', 'GHSA-hcg3-q754-cr77')."
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "file:///code/sample/go.mod"
                  }
                }
              }
            ]
          },
          {
            "ruleId": "CVE-2025-22870",
            "ruleIndex": 1,
            "level": "warning",
            "message": {
              "text": "Package 'golang.org/x/net@0.26.0' is vulnerable to 'CVE-2025-22870' (also known as 'GO-2025-3503', 'GHSA-qxp5-gwg8-xv66')."
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "file:///code/sample/go.mod"
                  }
                }
              }
            ]
          },
          {
            "ruleId": "CVE-2025-22871",
            "ruleIndex": 7,
            "level": "warning",
            "message": {
              "text": "Package 'stdlib@1.23.3' is vulnerable to 'CVE-2025-22871' (also known as 'BIT-golang-2025-22871', 'GO-2025-3563')."
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "file:///code/sample/go.mod"
                  }
                }
              }
            ]
          }
        ]
      }
    ]
  }
  