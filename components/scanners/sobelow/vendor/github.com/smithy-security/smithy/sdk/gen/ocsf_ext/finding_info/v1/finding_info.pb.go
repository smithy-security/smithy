// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: ocsf_ext/finding_info/v1/finding_info.proto

package v1

import (
	v1 "github.com/smithy-security/smithy/sdk/gen/ocsf_schema/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TargetType specifies the target type.
type DataSource_TargetType int32

const (
	DataSource_TARGET_TYPE_UNSPECIFIED     DataSource_TargetType = 0
	DataSource_TARGET_TYPE_REPOSITORY      DataSource_TargetType = 1
	DataSource_TARGET_TYPE_CONTAINER_IMAGE DataSource_TargetType = 2
	DataSource_TARGET_TYPE_WEBSITE         DataSource_TargetType = 3
)

// Enum value maps for DataSource_TargetType.
var (
	DataSource_TargetType_name = map[int32]string{
		0: "TARGET_TYPE_UNSPECIFIED",
		1: "TARGET_TYPE_REPOSITORY",
		2: "TARGET_TYPE_CONTAINER_IMAGE",
		3: "TARGET_TYPE_WEBSITE",
	}
	DataSource_TargetType_value = map[string]int32{
		"TARGET_TYPE_UNSPECIFIED":     0,
		"TARGET_TYPE_REPOSITORY":      1,
		"TARGET_TYPE_CONTAINER_IMAGE": 2,
		"TARGET_TYPE_WEBSITE":         3,
	}
)

func (x DataSource_TargetType) Enum() *DataSource_TargetType {
	p := new(DataSource_TargetType)
	*p = x
	return p
}

func (x DataSource_TargetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataSource_TargetType) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_ext_finding_info_v1_finding_info_proto_enumTypes[0].Descriptor()
}

func (DataSource_TargetType) Type() protoreflect.EnumType {
	return &file_ocsf_ext_finding_info_v1_finding_info_proto_enumTypes[0]
}

func (x DataSource_TargetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataSource_TargetType.Descriptor instead.
func (DataSource_TargetType) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_ext_finding_info_v1_finding_info_proto_rawDescGZIP(), []int{0, 0}
}

// URISchema specifies the URI schema.
// For example:
// - purl: pkg:npm/angular/animation@12.3.1" -> "pkg"
// - file: file://main.go -> "file"
type DataSource_URISchema int32

const (
	DataSource_URI_SCHEMA_UNSPECIFIED DataSource_URISchema = 0
	DataSource_URI_SCHEMA_FILE        DataSource_URISchema = 1
	DataSource_URI_SCHEMA_PURL        DataSource_URISchema = 2
	DataSource_URI_SCHEMA_WEBSITE     DataSource_URISchema = 3
)

// Enum value maps for DataSource_URISchema.
var (
	DataSource_URISchema_name = map[int32]string{
		0: "URI_SCHEMA_UNSPECIFIED",
		1: "URI_SCHEMA_FILE",
		2: "URI_SCHEMA_PURL",
		3: "URI_SCHEMA_WEBSITE",
	}
	DataSource_URISchema_value = map[string]int32{
		"URI_SCHEMA_UNSPECIFIED": 0,
		"URI_SCHEMA_FILE":        1,
		"URI_SCHEMA_PURL":        2,
		"URI_SCHEMA_WEBSITE":     3,
	}
)

func (x DataSource_URISchema) Enum() *DataSource_URISchema {
	p := new(DataSource_URISchema)
	*p = x
	return p
}

func (x DataSource_URISchema) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataSource_URISchema) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_ext_finding_info_v1_finding_info_proto_enumTypes[1].Descriptor()
}

func (DataSource_URISchema) Type() protoreflect.EnumType {
	return &file_ocsf_ext_finding_info_v1_finding_info_proto_enumTypes[1]
}

func (x DataSource_URISchema) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataSource_URISchema.Descriptor instead.
func (DataSource_URISchema) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_ext_finding_info_v1_finding_info_proto_rawDescGZIP(), []int{0, 1}
}

type Enrichment_EnrichmentType int32

const (
	Enrichment_ENRICHMENT_TYPE_UNSPECIFIED    Enrichment_EnrichmentType = 0
	Enrichment_ENRICHMENT_TYPE_CORRELATION    Enrichment_EnrichmentType = 1
	Enrichment_ENRICHMENT_TYPE_DUPLICATION    Enrichment_EnrichmentType = 2
	Enrichment_ENRICHMENT_TYPE_INVESTIGATION  Enrichment_EnrichmentType = 3
	Enrichment_ENRICHMENT_TYPE_EXPLOIT_EXISTS Enrichment_EnrichmentType = 4
	Enrichment_ENRICHMENT_TYPE_REACHABILITY   Enrichment_EnrichmentType = 5
	Enrichment_ENRICHMENT_TYPE_PR_DIFF        Enrichment_EnrichmentType = 6
)

// Enum value maps for Enrichment_EnrichmentType.
var (
	Enrichment_EnrichmentType_name = map[int32]string{
		0: "ENRICHMENT_TYPE_UNSPECIFIED",
		1: "ENRICHMENT_TYPE_CORRELATION",
		2: "ENRICHMENT_TYPE_DUPLICATION",
		3: "ENRICHMENT_TYPE_INVESTIGATION",
		4: "ENRICHMENT_TYPE_EXPLOIT_EXISTS",
		5: "ENRICHMENT_TYPE_REACHABILITY",
		6: "ENRICHMENT_TYPE_PR_DIFF",
	}
	Enrichment_EnrichmentType_value = map[string]int32{
		"ENRICHMENT_TYPE_UNSPECIFIED":    0,
		"ENRICHMENT_TYPE_CORRELATION":    1,
		"ENRICHMENT_TYPE_DUPLICATION":    2,
		"ENRICHMENT_TYPE_INVESTIGATION":  3,
		"ENRICHMENT_TYPE_EXPLOIT_EXISTS": 4,
		"ENRICHMENT_TYPE_REACHABILITY":   5,
		"ENRICHMENT_TYPE_PR_DIFF":        6,
	}
)

func (x Enrichment_EnrichmentType) Enum() *Enrichment_EnrichmentType {
	p := new(Enrichment_EnrichmentType)
	*p = x
	return p
}

func (x Enrichment_EnrichmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enrichment_EnrichmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_ext_finding_info_v1_finding_info_proto_enumTypes[2].Descriptor()
}

func (Enrichment_EnrichmentType) Type() protoreflect.EnumType {
	return &file_ocsf_ext_finding_info_v1_finding_info_proto_enumTypes[2]
}

func (x Enrichment_EnrichmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Enrichment_EnrichmentType.Descriptor instead.
func (Enrichment_EnrichmentType) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_ext_finding_info_v1_finding_info_proto_rawDescGZIP(), []int{1, 0}
}

// DataSource is used to define Data Sources described on https://schema.ocsf.io/1.3.0/objects/finding_info.
type DataSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetType DataSource_TargetType `protobuf:"varint,1,opt,name=target_type,json=targetType,proto3,enum=finding_info.v1.DataSource_TargetType" json:"target_type,omitempty"`
	Uri        *DataSource_URI       `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	// location_data can be a different value based on target_type.
	//
	// Types that are assignable to LocationData:
	//
	//	*DataSource_FileFindingLocationData_
	//	*DataSource_PurlFindingLocationData_
	LocationData       isDataSource_LocationData      `protobuf_oneof:"location_data"`
	SourceCodeMetadata *DataSource_SourceCodeMetadata `protobuf:"bytes,5,opt,name=source_code_metadata,json=sourceCodeMetadata,proto3" json:"source_code_metadata,omitempty"`
	OciPackageMetadata *DataSource_OCIPackageMetadata `protobuf:"bytes,6,opt,name=oci_package_metadata,json=ociPackageMetadata,proto3" json:"oci_package_metadata,omitempty"`
	WebsiteMetadata    *DataSource_WebsiteMetadata    `protobuf:"bytes,7,opt,name=website_metadata,json=websiteMetadata,proto3" json:"website_metadata,omitempty"`
}

func (x *DataSource) Reset() {
	*x = DataSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSource) ProtoMessage() {}

func (x *DataSource) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSource.ProtoReflect.Descriptor instead.
func (*DataSource) Descriptor() ([]byte, []int) {
	return file_ocsf_ext_finding_info_v1_finding_info_proto_rawDescGZIP(), []int{0}
}

func (x *DataSource) GetTargetType() DataSource_TargetType {
	if x != nil {
		return x.TargetType
	}
	return DataSource_TARGET_TYPE_UNSPECIFIED
}

func (x *DataSource) GetUri() *DataSource_URI {
	if x != nil {
		return x.Uri
	}
	return nil
}

func (m *DataSource) GetLocationData() isDataSource_LocationData {
	if m != nil {
		return m.LocationData
	}
	return nil
}

func (x *DataSource) GetFileFindingLocationData() *DataSource_FileFindingLocationData {
	if x, ok := x.GetLocationData().(*DataSource_FileFindingLocationData_); ok {
		return x.FileFindingLocationData
	}
	return nil
}

func (x *DataSource) GetPurlFindingLocationData() *DataSource_PurlFindingLocationData {
	if x, ok := x.GetLocationData().(*DataSource_PurlFindingLocationData_); ok {
		return x.PurlFindingLocationData
	}
	return nil
}

func (x *DataSource) GetSourceCodeMetadata() *DataSource_SourceCodeMetadata {
	if x != nil {
		return x.SourceCodeMetadata
	}
	return nil
}

func (x *DataSource) GetOciPackageMetadata() *DataSource_OCIPackageMetadata {
	if x != nil {
		return x.OciPackageMetadata
	}
	return nil
}

func (x *DataSource) GetWebsiteMetadata() *DataSource_WebsiteMetadata {
	if x != nil {
		return x.WebsiteMetadata
	}
	return nil
}

type isDataSource_LocationData interface {
	isDataSource_LocationData()
}

type DataSource_FileFindingLocationData_ struct {
	FileFindingLocationData *DataSource_FileFindingLocationData `protobuf:"bytes,3,opt,name=file_finding_location_data,json=fileFindingLocationData,proto3,oneof"`
}

type DataSource_PurlFindingLocationData_ struct {
	PurlFindingLocationData *DataSource_PurlFindingLocationData `protobuf:"bytes,4,opt,name=purl_finding_location_data,json=purlFindingLocationData,proto3,oneof"`
}

func (*DataSource_FileFindingLocationData_) isDataSource_LocationData() {}

func (*DataSource_PurlFindingLocationData_) isDataSource_LocationData() {}

// annotations created by the DataEnricher
type Enrichment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnrichmentType Enrichment_EnrichmentType `protobuf:"varint,1,opt,name=enrichment_type,json=enrichmentType,proto3,enum=finding_info.v1.Enrichment_EnrichmentType" json:"enrichment_type,omitempty"`
	// enrichment represents the enrichment annotation raw value.
	//
	// Types that are assignable to Enrichment:
	//
	//	*Enrichment_Duplicate
	//	*Enrichment_Correlations
	//	*Enrichment_Investigations
	//	*Enrichment_ExploitExists
	//	*Enrichment_Reachability
	//	*Enrichment_PrDiff
	Enrichment isEnrichment_Enrichment `protobuf_oneof:"enrichment"`
}

func (x *Enrichment) Reset() {
	*x = Enrichment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enrichment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enrichment) ProtoMessage() {}

func (x *Enrichment) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enrichment.ProtoReflect.Descriptor instead.
func (*Enrichment) Descriptor() ([]byte, []int) {
	return file_ocsf_ext_finding_info_v1_finding_info_proto_rawDescGZIP(), []int{1}
}

func (x *Enrichment) GetEnrichmentType() Enrichment_EnrichmentType {
	if x != nil {
		return x.EnrichmentType
	}
	return Enrichment_ENRICHMENT_TYPE_UNSPECIFIED
}

func (m *Enrichment) GetEnrichment() isEnrichment_Enrichment {
	if m != nil {
		return m.Enrichment
	}
	return nil
}

func (x *Enrichment) GetDuplicate() *Enrichment_DuplicateEnrichment {
	if x, ok := x.GetEnrichment().(*Enrichment_Duplicate); ok {
		return x.Duplicate
	}
	return nil
}

func (x *Enrichment) GetCorrelations() *Enrichment_CorrelationEnrichment {
	if x, ok := x.GetEnrichment().(*Enrichment_Correlations); ok {
		return x.Correlations
	}
	return nil
}

func (x *Enrichment) GetInvestigations() *Enrichment_InvestigationEnrichment {
	if x, ok := x.GetEnrichment().(*Enrichment_Investigations); ok {
		return x.Investigations
	}
	return nil
}

func (x *Enrichment) GetExploitExists() *Enrichment_ExploitExistsEnrichment {
	if x, ok := x.GetEnrichment().(*Enrichment_ExploitExists); ok {
		return x.ExploitExists
	}
	return nil
}

func (x *Enrichment) GetReachability() *Enrichment_ReachabilityEnrichment {
	if x, ok := x.GetEnrichment().(*Enrichment_Reachability); ok {
		return x.Reachability
	}
	return nil
}

func (x *Enrichment) GetPrDiff() *Enrichment_PRDiffEnrichment {
	if x, ok := x.GetEnrichment().(*Enrichment_PrDiff); ok {
		return x.PrDiff
	}
	return nil
}

type isEnrichment_Enrichment interface {
	isEnrichment_Enrichment()
}

type Enrichment_Duplicate struct {
	Duplicate *Enrichment_DuplicateEnrichment `protobuf:"bytes,2,opt,name=duplicate,proto3,oneof"`
}

type Enrichment_Correlations struct {
	Correlations *Enrichment_CorrelationEnrichment `protobuf:"bytes,3,opt,name=correlations,proto3,oneof"`
}

type Enrichment_Investigations struct {
	Investigations *Enrichment_InvestigationEnrichment `protobuf:"bytes,4,opt,name=investigations,proto3,oneof"`
}

type Enrichment_ExploitExists struct {
	ExploitExists *Enrichment_ExploitExistsEnrichment `protobuf:"bytes,5,opt,name=exploit_exists,json=exploitExists,proto3,oneof"`
}

type Enrichment_Reachability struct {
	Reachability *Enrichment_ReachabilityEnrichment `protobuf:"bytes,6,opt,name=reachability,proto3,oneof"`
}

type Enrichment_PrDiff struct {
	PrDiff *Enrichment_PRDiffEnrichment `protobuf:"bytes,7,opt,name=pr_diff,json=prDiff,proto3,oneof"`
}

func (*Enrichment_Duplicate) isEnrichment_Enrichment() {}

func (*Enrichment_Correlations) isEnrichment_Enrichment() {}

func (*Enrichment_Investigations) isEnrichment_Enrichment() {}

func (*Enrichment_ExploitExists) isEnrichment_Enrichment() {}

func (*Enrichment_Reachability) isEnrichment_Enrichment() {}

func (*Enrichment_PrDiff) isEnrichment_Enrichment() {}

// URI specifies uri content.
type DataSource_URI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UriSchema DataSource_URISchema `protobuf:"varint,1,opt,name=uri_schema,json=uriSchema,proto3,enum=finding_info.v1.DataSource_URISchema" json:"uri_schema,omitempty"`
	Path      string               `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *DataSource_URI) Reset() {
	*x = DataSource_URI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSource_URI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSource_URI) ProtoMessage() {}

func (x *DataSource_URI) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSource_URI.ProtoReflect.Descriptor instead.
func (*DataSource_URI) Descriptor() ([]byte, []int) {
	return file_ocsf_ext_finding_info_v1_finding_info_proto_rawDescGZIP(), []int{0, 0}
}

func (x *DataSource_URI) GetUriSchema() DataSource_URISchema {
	if x != nil {
		return x.UriSchema
	}
	return DataSource_URI_SCHEMA_UNSPECIFIED
}

func (x *DataSource_URI) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// FileFindingLocationData specifies data associated with the physical location of a finding in a file.
type DataSource_FileFindingLocationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartLine   uint32 `protobuf:"varint,3,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	EndLine     uint32 `protobuf:"varint,4,opt,name=end_line,json=endLine,proto3" json:"end_line,omitempty"`
	StartColumn uint32 `protobuf:"varint,5,opt,name=start_column,json=startColumn,proto3" json:"start_column,omitempty"`
	EndColumn   uint32 `protobuf:"varint,6,opt,name=end_column,json=endColumn,proto3" json:"end_column,omitempty"`
}

func (x *DataSource_FileFindingLocationData) Reset() {
	*x = DataSource_FileFindingLocationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSource_FileFindingLocationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSource_FileFindingLocationData) ProtoMessage() {}

func (x *DataSource_FileFindingLocationData) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSource_FileFindingLocationData.ProtoReflect.Descriptor instead.
func (*DataSource_FileFindingLocationData) Descriptor() ([]byte, []int) {
	return file_ocsf_ext_finding_info_v1_finding_info_proto_rawDescGZIP(), []int{0, 1}
}

func (x *DataSource_FileFindingLocationData) GetStartLine() uint32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *DataSource_FileFindingLocationData) GetEndLine() uint32 {
	if x != nil {
		return x.EndLine
	}
	return 0
}

func (x *DataSource_FileFindingLocationData) GetStartColumn() uint32 {
	if x != nil {
		return x.StartColumn
	}
	return 0
}

func (x *DataSource_FileFindingLocationData) GetEndColumn() uint32 {
	if x != nil {
		return x.EndColumn
	}
	return 0
}

// PurlFindingLocationData specifies data associated with the logical location of a finding in a purl.
type DataSource_PurlFindingLocationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DataSource_PurlFindingLocationData) Reset() {
	*x = DataSource_PurlFindingLocationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSource_PurlFindingLocationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSource_PurlFindingLocationData) ProtoMessage() {}

func (x *DataSource_PurlFindingLocationData) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSource_PurlFindingLocationData.ProtoReflect.Descriptor instead.
func (*DataSource_PurlFindingLocationData) Descriptor() ([]byte, []int) {
	return file_ocsf_ext_finding_info_v1_finding_info_proto_rawDescGZIP(), []int{0, 2}
}

// SourceCodeMetadata records the metadata of the repository holding the code of either
type DataSource_SourceCodeMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepositoryUrl string `protobuf:"bytes,1,opt,name=repository_url,json=repositoryUrl,proto3" json:"repository_url,omitempty"`
	Reference     string `protobuf:"bytes,2,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *DataSource_SourceCodeMetadata) Reset() {
	*x = DataSource_SourceCodeMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSource_SourceCodeMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSource_SourceCodeMetadata) ProtoMessage() {}

func (x *DataSource_SourceCodeMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSource_SourceCodeMetadata.ProtoReflect.Descriptor instead.
func (*DataSource_SourceCodeMetadata) Descriptor() ([]byte, []int) {
	return file_ocsf_ext_finding_info_v1_finding_info_proto_rawDescGZIP(), []int{0, 3}
}

func (x *DataSource_SourceCodeMetadata) GetRepositoryUrl() string {
	if x != nil {
		return x.RepositoryUrl
	}
	return ""
}

func (x *DataSource_SourceCodeMetadata) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

// OCIPackageMetadata records the metadata of the package that was scanned. There is a possibility
// that we can correlate an OCI package to a source code repository from where it was generated. The
// fact that these fields exist doesn't mean that the SourceCodeMetadata won't be present.
type DataSource_OCIPackageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageUrl string `protobuf:"bytes,1,opt,name=package_url,json=packageUrl,proto3" json:"package_url,omitempty"`
	Tag        string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *DataSource_OCIPackageMetadata) Reset() {
	*x = DataSource_OCIPackageMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSource_OCIPackageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSource_OCIPackageMetadata) ProtoMessage() {}

func (x *DataSource_OCIPackageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSource_OCIPackageMetadata.ProtoReflect.Descriptor instead.
func (*DataSource_OCIPackageMetadata) Descriptor() ([]byte, []int) {
	return file_ocsf_ext_finding_info_v1_finding_info_proto_rawDescGZIP(), []int{0, 4}
}

func (x *DataSource_OCIPackageMetadata) GetPackageUrl() string {
	if x != nil {
		return x.PackageUrl
	}
	return ""
}

func (x *DataSource_OCIPackageMetadata) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

// WebsiteMetadata records the metadata of the webiste that was scanned.
type DataSource_WebsiteMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *DataSource_WebsiteMetadata) Reset() {
	*x = DataSource_WebsiteMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSource_WebsiteMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSource_WebsiteMetadata) ProtoMessage() {}

func (x *DataSource_WebsiteMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSource_WebsiteMetadata.ProtoReflect.Descriptor instead.
func (*DataSource_WebsiteMetadata) Descriptor() ([]byte, []int) {
	return file_ocsf_ext_finding_info_v1_finding_info_proto_rawDescGZIP(), []int{0, 5}
}

func (x *DataSource_WebsiteMetadata) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// if it has this enrichment at all, the finding is a duplicate
type Enrichment_DuplicateEnrichment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Enrichment_DuplicateEnrichment) Reset() {
	*x = Enrichment_DuplicateEnrichment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enrichment_DuplicateEnrichment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enrichment_DuplicateEnrichment) ProtoMessage() {}

func (x *Enrichment_DuplicateEnrichment) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enrichment_DuplicateEnrichment.ProtoReflect.Descriptor instead.
func (*Enrichment_DuplicateEnrichment) Descriptor() ([]byte, []int) {
	return file_ocsf_ext_finding_info_v1_finding_info_proto_rawDescGZIP(), []int{1, 0}
}

// a list of finding ids, of the other findings it has been correlated to
type Enrichment_CorrelationEnrichment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Findings []uint64 `protobuf:"varint,1,rep,packed,name=findings,proto3" json:"findings,omitempty"`
}

func (x *Enrichment_CorrelationEnrichment) Reset() {
	*x = Enrichment_CorrelationEnrichment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enrichment_CorrelationEnrichment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enrichment_CorrelationEnrichment) ProtoMessage() {}

func (x *Enrichment_CorrelationEnrichment) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enrichment_CorrelationEnrichment.ProtoReflect.Descriptor instead.
func (*Enrichment_CorrelationEnrichment) Descriptor() ([]byte, []int) {
	return file_ocsf_ext_finding_info_v1_finding_info_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Enrichment_CorrelationEnrichment) GetFindings() []uint64 {
	if x != nil {
		return x.Findings
	}
	return nil
}

// status of the finding after a user investigation
type Enrichment_InvestigationEnrichment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status v1.IncidentFinding_VerdictId `protobuf:"varint,1,opt,name=status,proto3,enum=ocsf_schema.v1.IncidentFinding_VerdictId" json:"status,omitempty"`
}

func (x *Enrichment_InvestigationEnrichment) Reset() {
	*x = Enrichment_InvestigationEnrichment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enrichment_InvestigationEnrichment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enrichment_InvestigationEnrichment) ProtoMessage() {}

func (x *Enrichment_InvestigationEnrichment) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enrichment_InvestigationEnrichment.ProtoReflect.Descriptor instead.
func (*Enrichment_InvestigationEnrichment) Descriptor() ([]byte, []int) {
	return file_ocsf_ext_finding_info_v1_finding_info_proto_rawDescGZIP(), []int{1, 2}
}

func (x *Enrichment_InvestigationEnrichment) GetStatus() v1.IncidentFinding_VerdictId {
	if x != nil {
		return x.Status
	}
	return v1.IncidentFinding_VerdictId(0)
}

// ExploitExistsEnrichment is an enrichment that indicates that the finding has a known exploit
// and a list of references to the exploit and relevant writeups or papers
// that can be used to investigate the finding
type Enrichment_ExploitExistsEnrichment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExploitUrl    string   `protobuf:"bytes,1,opt,name=exploit_url,json=exploitUrl,proto3" json:"exploit_url,omitempty"`
	References    []string `protobuf:"bytes,2,rep,name=references,proto3" json:"references,omitempty"`
	ExploitCode   string   `protobuf:"bytes,3,opt,name=exploit_code,json=exploitCode,proto3" json:"exploit_code,omitempty"`
	IsExploitable bool     `protobuf:"varint,4,opt,name=is_exploitable,json=isExploitable,proto3" json:"is_exploitable,omitempty"`
}

func (x *Enrichment_ExploitExistsEnrichment) Reset() {
	*x = Enrichment_ExploitExistsEnrichment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enrichment_ExploitExistsEnrichment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enrichment_ExploitExistsEnrichment) ProtoMessage() {}

func (x *Enrichment_ExploitExistsEnrichment) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enrichment_ExploitExistsEnrichment.ProtoReflect.Descriptor instead.
func (*Enrichment_ExploitExistsEnrichment) Descriptor() ([]byte, []int) {
	return file_ocsf_ext_finding_info_v1_finding_info_proto_rawDescGZIP(), []int{1, 3}
}

func (x *Enrichment_ExploitExistsEnrichment) GetExploitUrl() string {
	if x != nil {
		return x.ExploitUrl
	}
	return ""
}

func (x *Enrichment_ExploitExistsEnrichment) GetReferences() []string {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *Enrichment_ExploitExistsEnrichment) GetExploitCode() string {
	if x != nil {
		return x.ExploitCode
	}
	return ""
}

func (x *Enrichment_ExploitExistsEnrichment) GetIsExploitable() bool {
	if x != nil {
		return x.IsExploitable
	}
	return false
}

// ReachabilityEnrichment this is currently a placeholder.
type Enrichment_ReachabilityEnrichment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Enrichment_ReachabilityEnrichment) Reset() {
	*x = Enrichment_ReachabilityEnrichment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enrichment_ReachabilityEnrichment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enrichment_ReachabilityEnrichment) ProtoMessage() {}

func (x *Enrichment_ReachabilityEnrichment) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enrichment_ReachabilityEnrichment.ProtoReflect.Descriptor instead.
func (*Enrichment_ReachabilityEnrichment) Descriptor() ([]byte, []int) {
	return file_ocsf_ext_finding_info_v1_finding_info_proto_rawDescGZIP(), []int{1, 4}
}

// PRDiffEnrichment is an enrichment that adds data about findings related to
// files in PR diffs.
type Enrichment_PRDiffEnrichment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InDiff   bool   `protobuf:"varint,1,opt,name=in_diff,json=inDiff,proto3" json:"in_diff,omitempty"`
	FilePath string `protobuf:"bytes,2,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	PrLink   string `protobuf:"bytes,3,opt,name=pr_link,json=prLink,proto3" json:"pr_link,omitempty"`
}

func (x *Enrichment_PRDiffEnrichment) Reset() {
	*x = Enrichment_PRDiffEnrichment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enrichment_PRDiffEnrichment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enrichment_PRDiffEnrichment) ProtoMessage() {}

func (x *Enrichment_PRDiffEnrichment) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enrichment_PRDiffEnrichment.ProtoReflect.Descriptor instead.
func (*Enrichment_PRDiffEnrichment) Descriptor() ([]byte, []int) {
	return file_ocsf_ext_finding_info_v1_finding_info_proto_rawDescGZIP(), []int{1, 5}
}

func (x *Enrichment_PRDiffEnrichment) GetInDiff() bool {
	if x != nil {
		return x.InDiff
	}
	return false
}

func (x *Enrichment_PRDiffEnrichment) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *Enrichment_PRDiffEnrichment) GetPrLink() string {
	if x != nil {
		return x.PrLink
	}
	return ""
}

var File_ocsf_ext_finding_info_v1_finding_info_proto protoreflect.FileDescriptor

var file_ocsf_ext_finding_info_v1_finding_info_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x6f, 0x63, 0x73, 0x66, 0x5f, 0x65, 0x78, 0x74, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x66,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x1a, 0x20,
	0x6f, 0x63, 0x73, 0x66, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x6f,
	0x63, 0x73, 0x66, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xe6, 0x0a, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x47, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x55, 0x52, 0x49, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x72, 0x0a, 0x1a, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x17, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x72, 0x0a, 0x1a, 0x70, 0x75, 0x72, 0x6c, 0x5f, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x50, 0x75, 0x72, 0x6c, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x17, 0x70, 0x75, 0x72, 0x6c,
	0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x60, 0x0a, 0x14, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x60, 0x0a, 0x14, 0x6f, 0x63, 0x69, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x4f, 0x43, 0x49, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x12, 0x6f, 0x63, 0x69, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x56, 0x0a, 0x10, 0x77, 0x65, 0x62, 0x73, 0x69,
	0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x57,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0f,
	0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0x5f, 0x0a, 0x03, 0x55, 0x52, 0x49, 0x12, 0x44, 0x0a, 0x0a, 0x75, 0x72, 0x69, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x66, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x55, 0x52, 0x49, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x09, 0x75, 0x72, 0x69, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x1a, 0x95, 0x01, 0x0a, 0x17, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65,
	0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x1a, 0x19, 0x0a, 0x17, 0x50, 0x75, 0x72, 0x6c,
	0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x1a, 0x59, 0x0a, 0x12, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x72, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x47,
	0x0a, 0x12, 0x4f, 0x43, 0x49, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x1a, 0x23, 0x0a, 0x0f, 0x57, 0x65, 0x62, 0x73, 0x69,
	0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x7f, 0x0a, 0x0a,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x41,
	0x52, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x41, 0x52, 0x47, 0x45,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52,
	0x59, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x49, 0x4d, 0x41,
	0x47, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x42, 0x53, 0x49, 0x54, 0x45, 0x10, 0x03, 0x22, 0x69, 0x0a,
	0x09, 0x55, 0x52, 0x49, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x52,
	0x49, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x52, 0x49, 0x5f, 0x53, 0x43,
	0x48, 0x45, 0x4d, 0x41, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x55,
	0x52, 0x49, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x50, 0x55, 0x52, 0x4c, 0x10, 0x02,
	0x12, 0x16, 0x0a, 0x12, 0x55, 0x52, 0x49, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x57,
	0x45, 0x42, 0x53, 0x49, 0x54, 0x45, 0x10, 0x03, 0x42, 0x0f, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc3, 0x0a, 0x0a, 0x0a, 0x45, 0x6e,
	0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x0f, 0x65, 0x6e, 0x72, 0x69,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2a, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45,
	0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x65,
	0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a,
	0x09, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x09, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x57,
	0x0a, 0x0c, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x72,
	0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5d, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5c, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69,
	0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x6c,
	0x6f, 0x69, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x12, 0x58, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x72,
	0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0c, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x47,
	0x0a, 0x07, 0x70, 0x72, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x52, 0x44,
	0x69, 0x66, 0x66, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x06, 0x70, 0x72, 0x44, 0x69, 0x66, 0x66, 0x1a, 0x15, 0x0a, 0x13, 0x44, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x33,
	0x0a, 0x15, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x72,
	0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x1a, 0x5c, 0x0a, 0x17, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x41,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e,
	0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x49, 0x64, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x1a, 0xa4, 0x01, 0x0a, 0x17, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x45, 0x78, 0x70,
	0x6c, 0x6f, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x18, 0x0a, 0x16, 0x52, 0x65, 0x61, 0x63,
	0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x1a, 0x61, 0x0a, 0x10, 0x50, 0x52, 0x44, 0x69, 0x66, 0x66, 0x45, 0x6e, 0x72, 0x69,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x66,
	0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x6e, 0x44, 0x69, 0x66, 0x66, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0xf9, 0x01, 0x0a, 0x0e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x4e, 0x52, 0x49,
	0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x4e, 0x52,
	0x49, 0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x52,
	0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x4e,
	0x52, 0x49, 0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x55,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x45,
	0x4e, 0x52, 0x49, 0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x4e, 0x56, 0x45, 0x53, 0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x22,
	0x0a, 0x1e, 0x45, 0x4e, 0x52, 0x49, 0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x4f, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53,
	0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x4e, 0x52, 0x49, 0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4e, 0x52, 0x49, 0x43, 0x48, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x10,
	0x06, 0x42, 0x0c, 0x0a, 0x0a, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x44, 0x5a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6d,
	0x69, 0x74, 0x68, 0x79, 0x2d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2f, 0x73, 0x6d,
	0x69, 0x74, 0x68, 0x79, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x6f, 0x63, 0x73,
	0x66, 0x5f, 0x65, 0x78, 0x74, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ocsf_ext_finding_info_v1_finding_info_proto_rawDescOnce sync.Once
	file_ocsf_ext_finding_info_v1_finding_info_proto_rawDescData = file_ocsf_ext_finding_info_v1_finding_info_proto_rawDesc
)

func file_ocsf_ext_finding_info_v1_finding_info_proto_rawDescGZIP() []byte {
	file_ocsf_ext_finding_info_v1_finding_info_proto_rawDescOnce.Do(func() {
		file_ocsf_ext_finding_info_v1_finding_info_proto_rawDescData = protoimpl.X.CompressGZIP(file_ocsf_ext_finding_info_v1_finding_info_proto_rawDescData)
	})
	return file_ocsf_ext_finding_info_v1_finding_info_proto_rawDescData
}

var file_ocsf_ext_finding_info_v1_finding_info_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_ocsf_ext_finding_info_v1_finding_info_proto_goTypes = []interface{}{
	(DataSource_TargetType)(0),                 // 0: finding_info.v1.DataSource.TargetType
	(DataSource_URISchema)(0),                  // 1: finding_info.v1.DataSource.URISchema
	(Enrichment_EnrichmentType)(0),             // 2: finding_info.v1.Enrichment.EnrichmentType
	(*DataSource)(nil),                         // 3: finding_info.v1.DataSource
	(*Enrichment)(nil),                         // 4: finding_info.v1.Enrichment
	(*DataSource_URI)(nil),                     // 5: finding_info.v1.DataSource.URI
	(*DataSource_FileFindingLocationData)(nil), // 6: finding_info.v1.DataSource.FileFindingLocationData
	(*DataSource_PurlFindingLocationData)(nil), // 7: finding_info.v1.DataSource.PurlFindingLocationData
	(*DataSource_SourceCodeMetadata)(nil),      // 8: finding_info.v1.DataSource.SourceCodeMetadata
	(*DataSource_OCIPackageMetadata)(nil),      // 9: finding_info.v1.DataSource.OCIPackageMetadata
	(*DataSource_WebsiteMetadata)(nil),         // 10: finding_info.v1.DataSource.WebsiteMetadata
	(*Enrichment_DuplicateEnrichment)(nil),     // 11: finding_info.v1.Enrichment.DuplicateEnrichment
	(*Enrichment_CorrelationEnrichment)(nil),   // 12: finding_info.v1.Enrichment.CorrelationEnrichment
	(*Enrichment_InvestigationEnrichment)(nil), // 13: finding_info.v1.Enrichment.InvestigationEnrichment
	(*Enrichment_ExploitExistsEnrichment)(nil), // 14: finding_info.v1.Enrichment.ExploitExistsEnrichment
	(*Enrichment_ReachabilityEnrichment)(nil),  // 15: finding_info.v1.Enrichment.ReachabilityEnrichment
	(*Enrichment_PRDiffEnrichment)(nil),        // 16: finding_info.v1.Enrichment.PRDiffEnrichment
	(v1.IncidentFinding_VerdictId)(0),          // 17: ocsf_schema.v1.IncidentFinding.VerdictId
}
var file_ocsf_ext_finding_info_v1_finding_info_proto_depIdxs = []int32{
	0,  // 0: finding_info.v1.DataSource.target_type:type_name -> finding_info.v1.DataSource.TargetType
	5,  // 1: finding_info.v1.DataSource.uri:type_name -> finding_info.v1.DataSource.URI
	6,  // 2: finding_info.v1.DataSource.file_finding_location_data:type_name -> finding_info.v1.DataSource.FileFindingLocationData
	7,  // 3: finding_info.v1.DataSource.purl_finding_location_data:type_name -> finding_info.v1.DataSource.PurlFindingLocationData
	8,  // 4: finding_info.v1.DataSource.source_code_metadata:type_name -> finding_info.v1.DataSource.SourceCodeMetadata
	9,  // 5: finding_info.v1.DataSource.oci_package_metadata:type_name -> finding_info.v1.DataSource.OCIPackageMetadata
	10, // 6: finding_info.v1.DataSource.website_metadata:type_name -> finding_info.v1.DataSource.WebsiteMetadata
	2,  // 7: finding_info.v1.Enrichment.enrichment_type:type_name -> finding_info.v1.Enrichment.EnrichmentType
	11, // 8: finding_info.v1.Enrichment.duplicate:type_name -> finding_info.v1.Enrichment.DuplicateEnrichment
	12, // 9: finding_info.v1.Enrichment.correlations:type_name -> finding_info.v1.Enrichment.CorrelationEnrichment
	13, // 10: finding_info.v1.Enrichment.investigations:type_name -> finding_info.v1.Enrichment.InvestigationEnrichment
	14, // 11: finding_info.v1.Enrichment.exploit_exists:type_name -> finding_info.v1.Enrichment.ExploitExistsEnrichment
	15, // 12: finding_info.v1.Enrichment.reachability:type_name -> finding_info.v1.Enrichment.ReachabilityEnrichment
	16, // 13: finding_info.v1.Enrichment.pr_diff:type_name -> finding_info.v1.Enrichment.PRDiffEnrichment
	1,  // 14: finding_info.v1.DataSource.URI.uri_schema:type_name -> finding_info.v1.DataSource.URISchema
	17, // 15: finding_info.v1.Enrichment.InvestigationEnrichment.status:type_name -> ocsf_schema.v1.IncidentFinding.VerdictId
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_ocsf_ext_finding_info_v1_finding_info_proto_init() }
func file_ocsf_ext_finding_info_v1_finding_info_proto_init() {
	if File_ocsf_ext_finding_info_v1_finding_info_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Enrichment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSource_URI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSource_FileFindingLocationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSource_PurlFindingLocationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSource_SourceCodeMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSource_OCIPackageMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSource_WebsiteMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Enrichment_DuplicateEnrichment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Enrichment_CorrelationEnrichment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Enrichment_InvestigationEnrichment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Enrichment_ExploitExistsEnrichment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Enrichment_ReachabilityEnrichment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Enrichment_PRDiffEnrichment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*DataSource_FileFindingLocationData_)(nil),
		(*DataSource_PurlFindingLocationData_)(nil),
	}
	file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Enrichment_Duplicate)(nil),
		(*Enrichment_Correlations)(nil),
		(*Enrichment_Investigations)(nil),
		(*Enrichment_ExploitExists)(nil),
		(*Enrichment_Reachability)(nil),
		(*Enrichment_PrDiff)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ocsf_ext_finding_info_v1_finding_info_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ocsf_ext_finding_info_v1_finding_info_proto_goTypes,
		DependencyIndexes: file_ocsf_ext_finding_info_v1_finding_info_proto_depIdxs,
		EnumInfos:         file_ocsf_ext_finding_info_v1_finding_info_proto_enumTypes,
		MessageInfos:      file_ocsf_ext_finding_info_v1_finding_info_proto_msgTypes,
	}.Build()
	File_ocsf_ext_finding_info_v1_finding_info_proto = out.File
	file_ocsf_ext_finding_info_v1_finding_info_proto_rawDesc = nil
	file_ocsf_ext_finding_info_v1_finding_info_proto_goTypes = nil
	file_ocsf_ext_finding_info_v1_finding_info_proto_depIdxs = nil
}
