// Code generated by MockGen. DO NOT EDIT.
// Source: internal/target/target.go
//
// Generated by this command:
//
//	mockgen -package target_test -source internal/target/target.go -destination internal/target/target_mock_test.go Fetcher,Extractor,Persister,MetadataWriter
//

// Package target_test is a generated GoMock package.
package target_test

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFetcher is a mock of Fetcher interface.
type MockFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockFetcherMockRecorder
	isgomock struct{}
}

// MockFetcherMockRecorder is the mock recorder for MockFetcher.
type MockFetcherMockRecorder struct {
	mock *MockFetcher
}

// NewMockFetcher creates a new mock instance.
func NewMockFetcher(ctrl *gomock.Controller) *MockFetcher {
	mock := &MockFetcher{ctrl: ctrl}
	mock.recorder = &MockFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetcher) EXPECT() *MockFetcherMockRecorder {
	return m.recorder
}

// FetchArtifact mocks base method.
func (m *MockFetcher) FetchArtifact(ctx context.Context) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchArtifact", ctx)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchArtifact indicates an expected call of FetchArtifact.
func (mr *MockFetcherMockRecorder) FetchArtifact(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchArtifact", reflect.TypeOf((*MockFetcher)(nil).FetchArtifact), ctx)
}

// MockPersister is a mock of Persister interface.
type MockPersister struct {
	ctrl     *gomock.Controller
	recorder *MockPersisterMockRecorder
	isgomock struct{}
}

// MockPersisterMockRecorder is the mock recorder for MockPersister.
type MockPersisterMockRecorder struct {
	mock *MockPersister
}

// NewMockPersister creates a new mock instance.
func NewMockPersister(ctrl *gomock.Controller) *MockPersister {
	mock := &MockPersister{ctrl: ctrl}
	mock.recorder = &MockPersisterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersister) EXPECT() *MockPersisterMockRecorder {
	return m.recorder
}

// Persist mocks base method.
func (m *MockPersister) Persist(ctx context.Context, dest string, reader io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Persist", ctx, dest, reader)
	ret0, _ := ret[0].(error)
	return ret0
}

// Persist indicates an expected call of Persist.
func (mr *MockPersisterMockRecorder) Persist(ctx, dest, reader any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Persist", reflect.TypeOf((*MockPersister)(nil).Persist), ctx, dest, reader)
}

// MockExtractor is a mock of Extractor interface.
type MockExtractor struct {
	ctrl     *gomock.Controller
	recorder *MockExtractorMockRecorder
	isgomock struct{}
}

// MockExtractorMockRecorder is the mock recorder for MockExtractor.
type MockExtractorMockRecorder struct {
	mock *MockExtractor
}

// NewMockExtractor creates a new mock instance.
func NewMockExtractor(ctrl *gomock.Controller) *MockExtractor {
	mock := &MockExtractor{ctrl: ctrl}
	mock.recorder = &MockExtractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtractor) EXPECT() *MockExtractorMockRecorder {
	return m.recorder
}

// ExtractArtifact mocks base method.
func (m *MockExtractor) ExtractArtifact(ctx context.Context, sourcePath, destPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractArtifact", ctx, sourcePath, destPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExtractArtifact indicates an expected call of ExtractArtifact.
func (mr *MockExtractorMockRecorder) ExtractArtifact(ctx, sourcePath, destPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractArtifact", reflect.TypeOf((*MockExtractor)(nil).ExtractArtifact), ctx, sourcePath, destPath)
}

// MockMetadataWriter is a mock of MetadataWriter interface.
type MockMetadataWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataWriterMockRecorder
	isgomock struct{}
}

// MockMetadataWriterMockRecorder is the mock recorder for MockMetadataWriter.
type MockMetadataWriterMockRecorder struct {
	mock *MockMetadataWriter
}

// NewMockMetadataWriter creates a new mock instance.
func NewMockMetadataWriter(ctrl *gomock.Controller) *MockMetadataWriter {
	mock := &MockMetadataWriter{ctrl: ctrl}
	mock.recorder = &MockMetadataWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetadataWriter) EXPECT() *MockMetadataWriterMockRecorder {
	return m.recorder
}

// WriteMetadata mocks base method.
func (m *MockMetadataWriter) WriteMetadata(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMetadata", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMetadata indicates an expected call of WriteMetadata.
func (mr *MockMetadataWriterMockRecorder) WriteMetadata(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMetadata", reflect.TypeOf((*MockMetadataWriter)(nil).WriteMetadata), ctx)
}
