---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  generateName: smithy-dast-orchestration-project-
  namespace: smithy
spec:
  pipelineRef:
    name: smithy-dast-orchestration-project
  params:
  - name: producer-zap-orchestration-file-base64
    value: "CiMhL3Vzci9iaW4vZW52IHB5dGhvbgojIEJhc2U2NCBvcmNoZXN0cmF0aW9uIGZpbGUKaW1wb3J0IHRpbWUKaW1wb3J0IHJlcXVlc3RzCmltcG9ydCB1cmxsaWIKCnphcF9hcGlfa2V5PSJjaGFuZ2VtZSIKemFwX2FwaV9ob3N0PSJsb2NhbGhvc3QiCnphcF9hcGlfcG9ydD0iODA4MSIKdGFyZ2V0X3VybD0iaHR0cDovL2xvY2FsaG9zdDo4MDgwL2JvZGdlaXQiCnJlcG9ydF9kaXI9Ii9zY3JhdGNoIgpyZXBvcnRfZmlsZW5hbWU9InphcC1yZXBvcnQuanNvbiIKCnJlcG9ydF90aXRsZT0iVGVzdFJlcG9ydCIKIyBUT0RPIG1ha2UgY29uZmlndXJhYmxlCgpkZWYgcmVnaXN0ZXIoKS0+c3RyOgogICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5wb3N0KCdodHRwOi8vbG9jYWxob3N0OjgwODAvYm9kZ2VpdC9yZWdpc3Rlci5qc3AnLGRhdGE9ewogICAgInVzZXJuYW1lIjoidGVzdEBleGFtcGxlLmNvbSIsCiAgICAicGFzc3dvcmQxIjoiZm9vYmFyIiwKICAgICJwYXNzd29yZDIiOiJmb29iYXIiLAogICAgfSkKICAgIGlmIHJlc3BvbnNlLnN0YXR1c19jb2RlICE9IDIwMDoKICAgICAgICByYWlzZSBSdW50aW1lRXJyb3IoZiJ0aGUgYm9kZ2VpdCBzZXJ2ZXIgcmVwbGllZCB3aXRoIHtyZXNwb25zZS5zdGF0dXNfY29kZX0gd2hpbGUgcmVnaXN0ZXJpbmciKQogICAgcmV0dXJuIHJlc3BvbnNlLmNvb2tpZXMuZ2V0KCdKU0VTU0lPTklEJykKCmRlZiBhZGRfY29udGV4dCgpOgogICAgcHJpbnQoImFkZGluZyBuZXcgY29udGV4dCIpCiAgICByZXNwb25zZSA9IHJlcXVlc3RzLmdldChmImh0dHA6Ly97emFwX2FwaV9ob3N0fTp7emFwX2FwaV9wb3J0fS9KU09OL2NvbnRleHQvYWN0aW9uL25ld0NvbnRleHQvP2FwaWtleT17emFwX2FwaV9rZXl9JmNvbnRleHROYW1lPWJvZGdlaXQiKQogICAgaWYgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgIT0gMjAwOgogICAgICAgIHJhaXNlIFJ1bnRpbWVFcnJvcihmInRoZSB6YXAgc2VydmVyIHJlcGxpZWQgd2l0aCB7cmVzcG9uc2Uuc3RhdHVzX2NvZGV9IHdoaWxlIGFkZGluZyBhIGNvbnRleHQiKQogICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKVsnY29udGV4dElkJ10KCmRlZiBleGNsdWRlX2xvZ291dF9mcm9tX2NvbnRleHQoKToKICAgIHByaW50KCJleGNsdWRpbmcgbG9nb3V0IGZyb20gY29udGV4dCIpCiAgICByZXNwb25zZSA9IHJlcXVlc3RzLmdldChmImh0dHA6Ly97emFwX2FwaV9ob3N0fTp7emFwX2FwaV9wb3J0fS9KU09OL2NvbnRleHQvYWN0aW9uL2V4Y2x1ZGVGcm9tQ29udGV4dC8/YXBpa2V5PXt6YXBfYXBpX2tleX0mY29udGV4dE5hbWU9Ym9kZ2VpdCZyZWdleD0uKm9nb3V0LioiKQogICAgaWYgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgIT0gMjAwOgogICAgICAgIHJhaXNlIFJ1bnRpbWVFcnJvcihmInRoZSB6YXAgc2VydmVyIHJlcGxpZWQgd2l0aCB7cmVzcG9uc2Uuc3RhdHVzX2NvZGV9IHdoaWxlIGV4Y2x1ZGluZyBsb2dvdXQgZnJvbSBjb250ZXh0IikKCmRlZiBleGNsdWRlX2xvZ291dF9mcm9tX3NwaWRlcigpOgogICAgcHJpbnQoImV4Y2x1ZGluZyBsb2dvdXQgZnJvbSBzcGlkZXIiKQogICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQoZiJodHRwOi8ve3phcF9hcGlfaG9zdH06e3phcF9hcGlfcG9ydH0vSlNPTi9zcGlkZXIvYWN0aW9uL2V4Y2x1ZGVGcm9tU2Nhbi8/YXBpa2V5PXt6YXBfYXBpX2tleX0mcmVnZXg9LipvZ291dC4qIikKICAgIGlmIHJlc3BvbnNlLnN0YXR1c19jb2RlICE9IDIwMDoKICAgICAgICByYWlzZSBSdW50aW1lRXJyb3IoZiJ0aGUgemFwIHNlcnZlciByZXBsaWVkIHdpdGgge3Jlc3BvbnNlLnN0YXR1c19jb2RlfSB3aGlsZSBleGNsdWRpbmcgbG9nb3V0IGZyb20gc3BpZGVyaW5nIikKCmRlZiBzcGlkZXIoKToKICAgIHByaW50KCJzcGlkZXJpbmciKQogICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQoZiJodHRwOi8ve3phcF9hcGlfaG9zdH06e3phcF9hcGlfcG9ydH0vSlNPTi9zcGlkZXIvYWN0aW9uL3NjYW4vP2FwaWtleT17emFwX2FwaV9rZXl9JnVybD17dXJsbGliLnBhcnNlLnF1b3RlX3BsdXModGFyZ2V0X3VybCl9Jm1heENoaWxkcmVuPSZyZWN1cnNlPSZjb250ZXh0TmFtZT0mc3VidHJlZU9ubHk9IikKICAgIGlmIHJlc3BvbnNlLnN0YXR1c19jb2RlICE9IDIwMDoKICAgICAgICByYWlzZSBSdW50aW1lRXJyb3IoZiJ0aGUgemFwIHNlcnZlciByZXBsaWVkIHdpdGgge3Jlc3BvbnNlLnN0YXR1c19jb2RlfSB3aGlsZSBzcGlkZXJpbmciKQogICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKVsic2NhbiJdCgpkZWYgd2FpdF9mb3Jfc3BpZGVyKHNjYW5JZDppbnQpOgogICAgcHJpbnQoIndhaXRpbmcgZm9yIHNwaWRlciB0byBmaW5pc2giKQogICAgc3RhdHVzPTAKICAgIHdoaWxlIHN0YXR1cyA8IDEwMDoKICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLmdldChmImh0dHA6Ly97emFwX2FwaV9ob3N0fTp7emFwX2FwaV9wb3J0fS9KU09OL3NwaWRlci92aWV3L3N0YXR1cy8/YXBpa2V5PXt6YXBfYXBpX2tleX0mc2NhbklkPXtzY2FuSWR9IikKICAgICAgICBpZiByZXNwb25zZS5zdGF0dXNfY29kZSAhPSAyMDA6CiAgICAgICAgICAgIHJhaXNlIFJ1bnRpbWVFcnJvcihmInRoZSB6YXAgc2VydmVyIHJlcGxpZWQgd2l0aCB7cmVzcG9uc2Uuc3RhdHVzX2NvZGV9IHdoaWxlIGNoZWNraW5nIHNwaWRlciBzdGF0dXMiKQogICAgICAgIHN0YXR1cyA9IGludChyZXNwb25zZS5qc29uKClbInN0YXR1cyJdKQogICAgICAgIHByaW50KGYic3BpZGVyIGNvbXBsZXRpb24gc3RhdHVzOiB7c3RhdHVzfSIpCiAgICAgICAgdGltZS5zbGVlcCgzKQoKZGVmIGF0dGFjaygpOgogICAgcHJpbnQoInJ1bm5pbmcgYWN0aXZlIHNjYW4gYWdhaW5zdCB0YXJnZXQiKQogICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQoZiJodHRwOi8ve3phcF9hcGlfaG9zdH06e3phcF9hcGlfcG9ydH0vSlNPTi9hc2Nhbi9hY3Rpb24vc2Nhbi8/YXBpa2V5PXt6YXBfYXBpX2tleX0mdXJsPXt1cmxsaWIucGFyc2UucXVvdGVfcGx1cyh0YXJnZXRfdXJsKX0mcmVjdXJzZT10cnVlJmluU2NvcGVPbmx5PSZzY2FuUG9saWN5TmFtZT0mbWV0aG9kPSZwb3N0RGF0YT0mY29udGV4dElkPSIpCiAgICBpZiByZXNwb25zZS5zdGF0dXNfY29kZSAhPSAyMDA6CiAgICAgICAgcHJpbnQocmVzcG9uc2UudGV4dCkKICAgICAgICByYWlzZSBSdW50aW1lRXJyb3IoZiJ0aGUgemFwIHNlcnZlciByZXBsaWVkIHdpdGgge3Jlc3BvbnNlLnN0YXR1c19jb2RlfSB3aGlsZSBhdHRhY2tpbmciKQogICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKVsic2NhbiJdCgpkZWYgd2FpdF9mb3Jfc2NhbihzY2FuSWQ6aW50KToKICAgIHByaW50KCJ3YWl0aW5nIGZvciBhY3RpdmUgc2NhbiB0byBmaW5pc2giKQogICAgc3RhdHVzPTAKICAgIHdoaWxlIHN0YXR1cyA8IDEwMDoKICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLmdldChmImh0dHA6Ly97emFwX2FwaV9ob3N0fTp7emFwX2FwaV9wb3J0fS9KU09OL2FzY2FuL3ZpZXcvc3RhdHVzLz9hcGlrZXk9e3phcF9hcGlfa2V5fSZzY2FuSWQ9e3NjYW5JZH0iKQogICAgICAgIGlmIHJlc3BvbnNlLnN0YXR1c19jb2RlICE9IDIwMDoKICAgICAgICAgICAgcmFpc2UgUnVudGltZUVycm9yKGYidGhlIHphcCBzZXJ2ZXIgcmVwbGllZCB3aXRoIHtyZXNwb25zZS5zdGF0dXNfY29kZX0gd2hpbGUgY2hlY2tpbmcgc2NhbiBzdGF0dXMiKQogICAgICAgIHN0YXR1cyA9IGludChyZXNwb25zZS5qc29uKClbInN0YXR1cyJdKQogICAgICAgIHByaW50KGYiYWN0aXZlIHNjYW4gY29tcGxldGlvbiBzdGF0dXMgZm9yIHNjYW5JZDoge3NjYW5JZH0gaXM6IHtzdGF0dXN9IikKICAgICAgICB0aW1lLnNsZWVwKDMpCgpkZWYgZ2V0X3JlcG9ydCgpOgogICAgcHJpbnQoImdlbmVyYXRpbmcgcmVwb3J0IikKICAgIHJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KGYiaHR0cDovL3t6YXBfYXBpX2hvc3R9Ont6YXBfYXBpX3BvcnR9L0pTT04vcmVwb3J0cy9hY3Rpb24vZ2VuZXJhdGUvP2FwaWtleT17emFwX2FwaV9rZXl9JnRpdGxlPXtyZXBvcnRfdGl0bGV9JnRlbXBsYXRlPXRyYWRpdGlvbmFsLWpzb24mdGhlbWU9JmRlc2NyaXB0aW9uPSZjb250ZXh0cz0mc2l0ZXM9JnNlY3Rpb25zPSZpbmNsdWRlZENvbmZpZGVuY2VzPSZpbmNsdWRlZFJpc2tzPSZyZXBvcnRGaWxlTmFtZT17cmVwb3J0X2ZpbGVuYW1lfSZyZXBvcnRGaWxlTmFtZVBhdHRlcm49JnJlcG9ydERpcj17cmVwb3J0X2Rpcn0mZGlzcGxheT0iKQogICAgaWYgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgIT0gMjAwOgogICAgICAgIHJhaXNlIFJ1bnRpbWVFcnJvcihmInRoZSB6YXAgc2VydmVyIHJlcGxpZWQgd2l0aCB7cmVzcG9uc2Uuc3RhdHVzX2NvZGV9IHdoaWxlIGdlbmVyYXRpbmcgcmVwb3J0IikKICAgIHJldHVybiByZXNwb25zZS5qc29uKClbImdlbmVyYXRlIl0KCmV4Y2x1ZGVfbG9nb3V0X2Zyb21fc3BpZGVyKCkKc3BpZGVySWQ9c3BpZGVyKCkKd2FpdF9mb3Jfc3BpZGVyKHNwaWRlcklkKQpzY2FuSWQ9YXR0YWNrKCkKd2FpdF9mb3Jfc2NhbihzY2FuSWQpCnByaW50KGYicmVwb3J0IGxvY2F0aW9uIGlzOntnZXRfcmVwb3J0KCl9IikK"
  - name: producer-zap-orchestration-requirements-file-base64
    value: "Y2VydGlmaT09MjAyNC4xMi4xNApjaGFyc2V0LW5vcm1hbGl6ZXI9PTMuNC4xCmlkbmE9PTMuMTAKcmVxdWVzdHM9PTIuMzIuMwp1cmxsaWIzPT0yLjMuMAo="
 
  workspaces:
  - name: output
    subPath: source-code
    volumeClaimTemplate:
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi


# #!/usr/bin/env python
# # Base64 orchestration file
# import time
# import requests
# import urllib

# zap_api_key="changeme"
# zap_api_host="localhost"
# zap_api_port="8081"
# target_url="http://localhost:8080/bodgeit"
# report_dir="/scratch"
# report_filename="zap-report.json"

# report_title="TestReport"
# # TODO make configurable

# def register()->str:
#     response = requests.post('http://localhost:8080/bodgeit/register.jsp',data={
#     "username":"test@example.com",
#     "password1":"foobar",
#     "password2":"foobar",
#     })
#     if response.status_code != 200:
#         raise RuntimeError(f"the bodgeit server replied with {response.status_code} while registering")
#     return response.cookies.get('JSESSIONID')

# def add_context():
#     print("adding new context")
#     response = requests.get(f"http://{zap_api_host}:{zap_api_port}/JSON/context/action/newContext/?apikey={zap_api_key}&contextName=bodgeit")
#     if response.status_code != 200:
#         raise RuntimeError(f"the zap server replied with {response.status_code} while adding a context")
#     return response.json()['contextId']

# def exclude_logout_from_context():
#     print("excluding logout from context")
#     response = requests.get(f"http://{zap_api_host}:{zap_api_port}/JSON/context/action/excludeFromContext/?apikey={zap_api_key}&contextName=bodgeit&regex=.*ogout.*")
#     if response.status_code != 200:
#         raise RuntimeError(f"the zap server replied with {response.status_code} while excluding logout from context")

# def exclude_logout_from_spider():
#     print("excluding logout from spider")
#     response = requests.get(f"http://{zap_api_host}:{zap_api_port}/JSON/spider/action/excludeFromScan/?apikey={zap_api_key}&regex=.*ogout.*")
#     if response.status_code != 200:
#         raise RuntimeError(f"the zap server replied with {response.status_code} while excluding logout from spidering")

# def spider():
#     print("spidering")
#     response = requests.get(f"http://{zap_api_host}:{zap_api_port}/JSON/spider/action/scan/?apikey={zap_api_key}&url={urllib.parse.quote_plus(target_url)}&maxChildren=&recurse=&contextName=&subtreeOnly=")
#     if response.status_code != 200:
#         raise RuntimeError(f"the zap server replied with {response.status_code} while spidering")
#     return response.json()["scan"]

# def wait_for_spider(scanId:int):
#     print("waiting for spider to finish")
#     status=0
#     while status < 100:
#         response = requests.get(f"http://{zap_api_host}:{zap_api_port}/JSON/spider/view/status/?apikey={zap_api_key}&scanId={scanId}")
#         if response.status_code != 200:
#             raise RuntimeError(f"the zap server replied with {response.status_code} while checking spider status")
#         status = int(response.json()["status"])
#         print(f"spider completion status: {status}")
#         time.sleep(3)

# def attack():
#     print("running active scan against target")
#     response = requests.get(f"http://{zap_api_host}:{zap_api_port}/JSON/ascan/action/scan/?apikey={zap_api_key}&url={urllib.parse.quote_plus(target_url)}&recurse=true&inScopeOnly=&scanPolicyName=&method=&postData=&contextId=")
#     if response.status_code != 200:
#         print(response.text)
#         raise RuntimeError(f"the zap server replied with {response.status_code} while attacking")
#     return response.json()["scan"]

# def wait_for_scan(scanId:int):
#     print("waiting for active scan to finish")
#     status=0
#     while status < 100:
#         response = requests.get(f"http://{zap_api_host}:{zap_api_port}/JSON/ascan/view/status/?apikey={zap_api_key}&scanId={scanId}")
#         if response.status_code != 200:
#             raise RuntimeError(f"the zap server replied with {response.status_code} while checking scan status")
#         status = int(response.json()["status"])
#         print(f"active scan completion status for scanId: {scanId} is: {status}")
#         time.sleep(3)

# def get_report():
#     print("generating report")
#     response = requests.get(f"http://{zap_api_host}:{zap_api_port}/JSON/reports/action/generate/?apikey={zap_api_key}&title={report_title}&template=traditional-json&theme=&description=&contexts=&sites=&sections=&includedConfidences=&includedRisks=&reportFileName={report_filename}&reportFileNamePattern=&reportDir={report_dir}&display=")
#     if response.status_code != 200:
#         raise RuntimeError(f"the zap server replied with {response.status_code} while generating report")
#     return response.json()["generate"]

# exclude_logout_from_spider()
# spiderId=spider()
# wait_for_spider(spiderId)
# scanId=attack()
# wait_for_scan(scanId)
# print(f"report location is:{get_report()}")
