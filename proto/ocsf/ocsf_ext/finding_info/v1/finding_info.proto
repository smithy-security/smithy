syntax = "proto3";

package finding_info.v1;

import "ocsf_schema/v1/ocsf_schema.proto";

option go_package = "github.com/smithy-security/smithy/sdk/gen/ocsf_ext/finding_info/v1";

// DataSource is used to define Data Sources described on https://schema.ocsf.io/1.3.0/objects/finding_info.
message DataSource {
  // TargetType specifies the target type.
  enum TargetType {
    TARGET_TYPE_UNSPECIFIED = 0;
    TARGET_TYPE_REPOSITORY = 1;
    TARGET_TYPE_CONTAINER_IMAGE = 2;
  }

  // URISchema specifies the URI schema.
  // For example:
  // - purl: pkg:npm/angular/animation@12.3.1" -> "pkg"
  // - file: file://main.go -> "file"
  enum URISchema {
    URI_SCHEMA_UNSPECIFIED = 0;
    URI_SCHEMA_FILE = 1;
    URI_SCHEMA_PURL = 2;
  }

  // URI specifies uri content.
  message URI {
    URISchema uri_schema = 1;
    string path = 2;
  }

  // FileFindingLocationData specifies data associated with the physical location of a finding in a file.
  message FileFindingLocationData {
    uint32 start_line = 3;
    uint32 end_line = 4;
    uint32 start_column = 5;
    uint32 end_column = 6;
  }

  // PurlFindingLocationData specifies data associated with the logical location of a finding in a purl.
  message PurlFindingLocationData {}

  // SourceCodeMetadata records the metadata of the repository holding the code of either
  message SourceCodeMetadata {
    string repository_url = 1;
    string reference = 2;
  }

  // OCIPackageMetadata records the metadata of the package that was scanned. There is a possibility
  // that we can correlate an OCI package to a source code repository from where it was generated. The
  // fact that these fields exist doesn't mean that the SourceCodeMetadata won't be present.
  message OCIPackageMetadata {
    string package_url = 1;
    string tag = 2;
  }

  TargetType target_type = 1;
  URI uri = 2;
  // location_data can be a different value based on target_type.
  oneof location_data {
    FileFindingLocationData file_finding_location_data = 3;
    PurlFindingLocationData purl_finding_location_data = 4;
  }
  SourceCodeMetadata source_code_metadata = 5;
  OCIPackageMetadata oci_package_metadata = 6;
}

// annotations created by the DataEnricher
message Enrichment {
  enum EnrichmentType {
    ENRICHMENT_TYPE_UNSPECIFIED = 0;
    ENRICHMENT_TYPE_CORRELATION = 1;
    ENRICHMENT_TYPE_DUPLICATION = 2;
    ENRICHMENT_INVESTIGATION = 3;
    ENRICHMENT_FILTER = 4;
  }

  // if it has this enrichment at all, the finding is a duplicate
  message DuplicateEnrichment {}

  // if an issue has this enrichment at all, the finding should not be shown
  message FilterEnrichment {
    string reason = 1;
    // always set to VERDICT_ID_DISREGARD
    ocsf_schema.v1.IncidentFinding.VerdictId status = 2;
  }

  // a list of finding ids, of the other findings it has been correlated to
  message CorrelationEnrichment {
    repeated uint64 findings = 1;
  }

  EnrichmentType enrichment_type = 1;

  // status of the finding after a user investigation
  message InvestigationEnrichment {
    ocsf_schema.v1.IncidentFinding.VerdictId status = 1;
  }

  oneof enrichment {
    DuplicateEnrichment duplicate = 2;
    CorrelationEnrichment correlations = 3;
    InvestigationEnrichment investigations = 4;
    FilterEnrichment filter = 5;
  }
}
