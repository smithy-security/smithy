// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package component

import (
	"errors"
	"fmt"
)

const (
	// RunnerConfigLoggingLevelDebug is a RunnerConfigLoggingLevel of type debug.
	RunnerConfigLoggingLevelDebug RunnerConfigLoggingLevel = "debug"
	// RunnerConfigLoggingLevelInfo is a RunnerConfigLoggingLevel of type info.
	RunnerConfigLoggingLevelInfo RunnerConfigLoggingLevel = "info"
	// RunnerConfigLoggingLevelError is a RunnerConfigLoggingLevel of type error.
	RunnerConfigLoggingLevelError RunnerConfigLoggingLevel = "error"
	// RunnerConfigLoggingLevelWarn is a RunnerConfigLoggingLevel of type warn.
	RunnerConfigLoggingLevelWarn RunnerConfigLoggingLevel = "warn"
)

var ErrInvalidRunnerConfigLoggingLevel = errors.New("not a valid RunnerConfigLoggingLevel")

// String implements the Stringer interface.
func (x RunnerConfigLoggingLevel) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x RunnerConfigLoggingLevel) IsValid() bool {
	_, err := ParseRunnerConfigLoggingLevel(string(x))
	return err == nil
}

var _RunnerConfigLoggingLevelValue = map[string]RunnerConfigLoggingLevel{
	"debug": RunnerConfigLoggingLevelDebug,
	"info":  RunnerConfigLoggingLevelInfo,
	"error": RunnerConfigLoggingLevelError,
	"warn":  RunnerConfigLoggingLevelWarn,
}

// ParseRunnerConfigLoggingLevel attempts to convert a string to a RunnerConfigLoggingLevel.
func ParseRunnerConfigLoggingLevel(name string) (RunnerConfigLoggingLevel, error) {
	if x, ok := _RunnerConfigLoggingLevelValue[name]; ok {
		return x, nil
	}
	return RunnerConfigLoggingLevel(""), fmt.Errorf("%s is %w", name, ErrInvalidRunnerConfigLoggingLevel)
}

const (
	// StoreTypeLocal is a storeType of type local.
	StoreTypeLocal storeType = "local"
)

var ErrInvalidstoreType = errors.New("not a valid storeType")

// String implements the Stringer interface.
func (x storeType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x storeType) IsValid() bool {
	_, err := ParsestoreType(string(x))
	return err == nil
}

var _storeTypeValue = map[string]storeType{
	"local": StoreTypeLocal,
}

// ParsestoreType attempts to convert a string to a storeType.
func ParsestoreType(name string) (storeType, error) {
	if x, ok := _storeTypeValue[name]; ok {
		return x, nil
	}
	return storeType(""), fmt.Errorf("%s is %w", name, ErrInvalidstoreType)
}
